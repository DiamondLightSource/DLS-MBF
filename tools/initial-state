#!/usr/bin/env python

import mbf.requires

import sys
import numpy
from cothread import catools


DEVICE = sys.argv[1]

def put(axis, pv, value):
    catools.caput('%s:%s:%s' % (DEVICE, axis, pv), value)

def put_axes(pv, value, lmbf_mode = False):
    if lmbf_mode:
        put(X + Y, pv, value)
    else:
        for axis in [X, Y]:
            put(axis, pv, value)

def get(pv):
    return catools.caget('%s:%s' % (DEVICE, pv))

# Pickup the basic machine parameters
LMBF_MODE = bool(get('INFO:MODE'))
X = get('INFO:AXIS0')
Y = get('INFO:AXIS1')

BUNCHES = get('INFO:BUNCHES')
ADC_TAPS = get('INFO:ADC_TAPS')
DAC_TAPS = get('INFO:DAC_TAPS')


# Reset the compensation filters
filter = numpy.zeros(ADC_TAPS)
filter[0] = 1
put_axes('ADC:FILTER_S', filter)

filter = numpy.zeros(DAC_TAPS)
filter[0] = 1
put_axes('DAC:FILTER_S', filter)

# Force the overflow threshold somewhere sensible
put_axes('ADC:OVF_LIMIT_S', 0.75)
# Stop min/max firing all the time
put_axes('ADC:EVENT_LIMIT_S', 0.5)

# Set up the bunch bank gains
for bank in range(4):
    put_axes('BUN:%d:GAINWF_S' % bank, numpy.ones(BUNCHES), LMBF_MODE)

# Now some randomly chosen initial bank states
put_axes('BUN:0:OUTWF_S', 1 * numpy.ones(BUNCHES), LMBF_MODE)   # 0: FIR
put_axes('BUN:1:OUTWF_S', 4 * numpy.ones(BUNCHES), LMBF_MODE)   # 1: Sweep
put_axes('BUN:2:OUTWF_S', 2 * numpy.ones(BUNCHES), LMBF_MODE)   # 2: NCO
# Leave bank 3 off


# vim: set filetype=python:
