#!/usr/bin/env python

# Script for testing PLL behaviour

import time
import os
import sys

from lmbf.driver import driver, setup_pll, config_pll


regs = driver.Registers(0)
# pll = setup_pll.setup_pll(regs, '499_682')
# pll.verbose()

pll = config_pll.SettingsBase(regs.PLL_SPI)
setup_pll.setup_reclocked(pll)
setup_pll.setup_pll_ratios(pll, 13, 0, 5, 2, 381, 61)
pll.verbose()

# # See if setting these does anything.  (no, it does not)
# pll.out10_11.DCLK_DDLYd_CNTH = 3
# pll.out10_11.DCLK_DDLYd_CNTL = 2

pll.write_config()
time.sleep(0.01)        # Give the PLL time to lock
print regs.SYS.STATUS

# Bring SYNC/SYSREF to DIO #5
regs.SYS.CONTROL.DIO_SEL_SDCLK = 1



# First let's put 100 MHz DCLK on DIO #5
#
# This one works
def dio_dclk():
    pll.out2_3.DCLK_DIV = 25
    pll.out2_3.DCLK_MUX = 0
    pll.out2_3.SDCLK_MUX = 0


def disable_sync():
    # Disable the clock output disruption events
    pll.SYNC_DISSYSREF = 1
    pll.SYNC_DIS0 = 1
    pll.SYNC_DIS2 = 1
    pll.SYNC_DIS4 = 1
    pll.SYNC_DIS6 = 1
    pll.SYNC_DIS8 = 1
    pll.SYNC_DIS10 = 1
    pll.SYNC_DIS12 = 1


# Put 100 MHz CLKin0 on DIO #5 (out2_3)
#
# This works, mustn't forget to enable CLKin0!
def dio_CLKin0():
    disable_sync()

    pll.CLKin0_EN = 1
    pll.SYSREF_MUX = 0
    pll.SYNC_MODE = 0
    pll.SYSREF_CLKin0_MUX = 1
    pll.CLKin0_OUT_MUX = 0

    pll.SYSREF_DDLY_PD = 1
    pll.SYSREF_PLSR_PD = 1
    pll.SYSREF_PD = 1


# Try putting divided VCO onto SYSREF
#
# This seems to work!
def dio_vco_sysref():
    disable_sync()

    pll.SYSREF_MUX = 3      # Continuous SYSREF
    pll.SYSREF_DIV = 25     # Divide VCO output to generate 100 MHz output



# Generate pulses on SYNC
def dio_sync_pulser():
    disable_sync()

#     pll.SYNC_MODE = 2           # SYNC event generated from SYNC pin
    pll.SYNC_MODE = 3           # SYNC generated by write to SYSREF_PULSE_CNT
    pll.SYSREF_MUX = 2          # SYSREF pulser
    pll.SYSREF_DDLY = 8

    # These two determine the shape of the generate pulses
    pll.SYSREF_DIV = 20         # Determines length of generated pulse
    pll.SYSREF_PULSE_CNT = 0    # Generate just the one pulse


# # Following instructions in 9.3.2.1
# def enable_sysref():
#     pll.SYSREF_DDLY_PD = 0  # Needed for deterministic timing during first SYNC
#     pll.SYNC_EN = 1
# 
#     # Now follow 9.3.2.1.1
#     # 1.
#     pll.SYNC_POL = 0
#     pll.SYNC_MODE = 1
#     pll.SYSREF_MUX = 0



# Now try to resync

def resync():
    # Follow 9.3.1 precisely.  We'll first try to configure pin or SPI SYNC
#     pll.SYNC_MODE = 1
#     pll.SYSREF_MUX = 0
#     pll.SYNC_1SHOT_EN = 1

    with pll:
        pll.SYNC_MODE = 3       # SYNC generated by write to SYSREF_PULSE_CNT
        pll.SYSREF_MUX = 2      # SYSREF pulser

        pll.SYSREF_DDLY = 8
        pll.SYSREF_DIV = 200    # Determines length of generated pulse

        # Enable sync on *all* registers
        pll._write_register(0x144, 0)

        # These two determine the shape of the generate pulses
    with pll:
        pll.SYSREF_PULSE_CNT = 0    # Generate just the one pulse

    # Disable sync
    with pll:
        pll._write_register(0x144, 0xff)
        pll.SYNC_MODE = 0
        pll.SYSREF_MUX = 0




def spi_sync():
    pll.SYNC_POL = 1 - pll.SYNC_POL

def pin_sync():
    regs.SYS.CONTROL.PLL_SYNC = 1
    regs.SYS.CONTROL.PLL_SYNC = 0

with pll:
#     dio_vco_sysref()
#     dio_CLKin0()
#     dio_sync_pulser()
    pass

def desync():
    # Desync CLK OUT (out10_11) so we can test SYNC
    pll.out10_11.DCLK_DIV = 6
    pll.out10_11.DCLK_DIV = 5
    # Alsy desync feedback
    pll.out8_9.DCLK_DIV = 6
    pll.out8_9.DCLK_DIV = 5

# Perform synchronisation according to 9.3.2.1.1
def resync2():
    pll.SYNC_POL = 0

    pll.SYNC_MODE = 1       # SYNC event from SYNC pin
    pll.SYSREF_MUX = 0      # Standard sync

    pll.SYSREF_PULSE_CNT = 0
    pll._write_register(0x144, 0)
    pll.SYNC_POL = 1
    pll.SYNC_POL = 0
    pll._write_register(0x144, 0xff)

#     pll.SYNC_MODE = 2
#     pll.SYSREF_MUX = 2


def step_delay(later = True):
#     pll.SYNC_MODE = 1       # SYNC event from SYNC pin
#     pll.SYSREF_MUX = 0      # Standard sync

    new_div = 3 if later else 2

    with pll:
        pll.out10_11.DCLK_DDLY_CNTH = new_div
        pll.out10_11.DCLK_DDLYd_CNTH = new_div
        pll.out10_11.DCLK_DDLY_CNTL = new_div
        pll.out10_11.DCLK_DDLYd_CNTL = new_div

        pll.out10_11.DCLK_DDLY_PD = 0
        pll._write_register(0x144, 0xff)
        pll.DDLYd10_EN = 1
#         pll.SYNC_DIS10 = 0

    #     pll.SYSREF_PULSE_CNT = 0
    #     pll._write_register(0x144, 0xff)
    #     pll.SYNC_POL = 1
    #     pll.SYNC_POL = 0



#         pll.SYNC_MODE = 3
#         pll.SYSREF_MUX = 2

    with pll:
        pll.DDLYd_STEP_CNT = 1
#     pll.DDLYd10_EN = 0
