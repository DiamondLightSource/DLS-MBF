#!/usr/bin/env python

import driver
from driver import REGS, ADC
import numpy

# Configure checkerboard ADC capture
idelay = REGS[3, 0] & 0xFF
ADC[0x550] = 4

def capture(count = 1024):
    # Each counted capture corresponds to 8 captured bytes
    bytes = 8 * count
    REGS[0, 4] = count
    with open(driver.DDR0_NAME) as ddr0:
        buf = numpy.frombuffer(ddr0.read(bytes), dtype = numpy.uint16)
    return buf.reshape((-1, 2, 2))

def show(a):
    return '%04x %04x %04x %04x' % (a[0, 0], a[0, 1], a[1, 0], a[1, 1])

def assess(c):
    v = c.std(0).mean()
    return v == 0 and (numpy.diff(c.mean(0)) == 0).all()

good = numpy.zeros(32, dtype = bool)
for delay in range(32):
    REGS[3, 0] = 0x100 + delay
    c = capture(1024*1024)
    m = c.std(0).mean()
    good[delay] = assess(c)
    print delay, m, show(c.mean(0)), good[delay]
print good

# Restore previous state
ADC[0x550] = 0
REGS[3, 0] = 0x100 + idelay
