#!/usr/bin/env python

import argparse
import math
import time

import numpy

from lmbf.driver import driver, setup_pll, setup_adc, scan_idelay


parser = argparse.ArgumentParser(description = 'Scan for best IDELAY setting')
parser.add_argument(
    '-a', dest = 'addr', default = 0,
    help = 'Set physical address of card.  If not specified then use card 0')
parser.add_argument(
    '-f', dest = 'f_rf', default = 500, type = float,
    help = 'RF frequency, used to calculate number of samples')
parser.add_argument(
    '-s', dest = 'idelay', type = lambda s: int(s, 0),
    help = 'If set, set IDELAY to this after test')
parser.add_argument(
    '-n', dest = 'capture_count', default = 1024 * 1024, type = int,
    help = 'Number of data points captured for each sample')
parser.add_argument(
    '-m', dest = 'clock_mode', default = None,
    help = 'Configure clock mode before running scan')
args = parser.parse_args()

def show(a):
    return '%04x %04x %04x %04x' % (a[0, 0], a[0, 1], a[1, 0], a[1, 1])


regs = driver.Registers(args.addr)

old_idelay = scan_idelay.setup_scan(regs)
if args.idelay is not None:
    old_idelay = args.idelay

# Configure clock mode if requested, and set up the ADC
if args.clock_mode:
    setup_pll.setup_pll(regs, mode = args.clock_mode)
    time.sleep(0.1)         # Give the PLL time to lock
    setup_adc.setup_adc(regs)

# Performs scan and report
N = scan_idelay.scan_length(args.f_rf)
for delay in range(N):
    scan_idelay.set_idelay(regs, delay)
    c = scan_idelay.capture(regs, args.capture_count)
    m = c.std(0).mean()
    print '%02x' % delay, show(c.mean(0)), m == 0.0, scan_idelay.assess(c)

# Restore previous state
scan_idelay.complete_scan(regs)
scan_idelay.set_idelay(regs, old_idelay)
