#!/usr/bin/env python

import sys
import argparse

from lmbf.driver import driver

def to_int(s):
    return int(s, 0)

parser = argparse.ArgumentParser(description = 'Read/write raw registers')
parser.add_argument(
    '-a', dest = 'addr', default = 0,
    help = 'Set physical address of card.  If not specified then card 0')
parser.add_argument(
    'bank', type = int,
    help = '''\
Register bank to access according to mapping:
    0   SYS     - System control registers;
    1   CTRL    - Shared DSP management registers;
    2   DSP0    - First DSP channel control;
    3   DSP1    - Second DSP channel control''')
parser.add_argument(
    'reg', type = to_int, nargs = '?',
    help = 'Register to read or write.  If not specified, entire bank is read')
parser.add_argument(
    'value', type = to_int, nargs = '?',
    help = 'Value to write to register if specifed')
args = parser.parse_args()


regs = driver.RawRegisters(args.addr)
REGS = [
    regs.reg_system,
    regs.reg_dsp_ctrl,
    regs.reg_dsp[0],
    regs.reg_dsp[1],
]
bank = REGS[args.bank]

if args.reg is None:
    # Read block
    for n, val in enumerate(bank):
        if n % 8 == 0:
            print '%02x: ' % n,
        print '%08x' % val,
        if n % 8 == 7:
            print
elif args.value is None:
    # Read one register
    val = bank[args.reg]
    print '%d:%d => %08X (%d)' % (args.bank, args.reg, val, val)
else:
    # Write one register
    bank[args.reg] = args.value
