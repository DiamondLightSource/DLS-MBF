#!/usr/bin/env python

import mbf.requires

import sys
import time
import numpy

import cothread
from cothread.catools import *

from configure import MBF, DRAM, PV_set


# Common support code.


class DAC_OUT:
    # Any combination of the values below is valid for a DAC output selection
    OFF = 0
    FIR = 1
    NCO = 2
    SWEEP = 4
    PLL = 8

# We will work with two predefined FIR settings
FIR_UNIT = 0
FIR_ZERO = 1



# ------------------------------------------------------------------------------
# Basic MBF setup support


def unit_fir(length):
    fir = numpy.zeros(length)
    fir[0] = 1
    return fir


# Configure FIR with given taps waveform
@MBF.method
def fir_wf(mbf, fir, filter):
    mbf.set('FIR:%d:TAPS_S' % fir, filter)
    mbf.set('FIR:%d:USEWF_S' % fir, 'Waveform')



# Configures basic set up for timing test: we use loopback with internal delay
# compensation turned off and a standard DAC preemphasis.  This establishes a
# setup that can be assumed by all other tests.
@MBF.method
def configure_timing_test(mbf, compensate = False):
    print 'Setting initial configuration'

    # Turn DAC output in case there's something connected
    mbf.set_channels('DAC:ENABLE_S', 'Off')

    # Ensure nothing is running: disarm all triggers, stop all active targets
    mbf.set_channels('TRG:SEQ:DISARM_S', 0)
    mbf.set_channels('SEQ:RESET_S', 0)
    mbf.set_shared('TRG:MEM:DISARM_S', 0)

    # For the rest we'll work with channel 0


    # We'll be using soft triggering.  Ensure it's in one shot state
    mbf.set('TRG:SEQ:MODE_S', 'One Shot')
    mbf.set_shared('TRG:MEM:MODE_S', 'One Shot')
    mbf.set_trigger_inputs('SEQ', 0, 'SOFT')
    mbf.set_trigger_inputs('MEM', None, 'SOFT')

    mbf.set_shared('MEM:RUNOUT_S', '25%')

    # Disable delay compensation so we meaure raw delays and use loopback data
    mbf.set('ADC:LOOPBACK_S', 'Loopback')

    # Configure ADC and DAC filters with identity filters.
    mbf.set('ADC:FILTER_S', unit_fir(mbf.adc_taps))
    mbf.set('DAC:FILTER_S', unit_fir(mbf.dac_taps))
    # Configure fill reject filter with minimum length
    mbf.set('ADC:REJECT_COUNT_S', '1 turns')


    # For a sensible starting state, disable the sequencer and select bank 0.
    # Each test will need to configure the bank setup it needs.
    mbf.state0(0)

    # Configure FIR 0 to default pass-through mode and FIR 1 to zero
    mbf.fir_wf(FIR_UNIT, unit_fir(mbf.bunch_taps))
    mbf.fir_wf(FIR_ZERO, numpy.zeros(mbf.bunch_taps))

    # Configure NCO for DC output at maximum gain: this makes a useful pulse
    # source when routed into a single bunch.
    mbf.set('NCO:FREQ_S', 0)
    mbf.set('NCO:GAIN_S', '0dB')
    mbf.set('NCO:ENABLE_S', 'On')

    # Reset detector window in case it's been messed with
    mbf.set('SEQ:RESET_WIN_S.PROC', 0)

    # Enable DET0, disable the rest
    mbf.set('DET:0:ENABLE_S', 'Enabled')
    mbf.set('DET:1:ENABLE_S', 'Disabled')
    mbf.set('DET:2:ENABLE_S', 'Disabled')
    mbf.set('DET:3:ENABLE_S', 'Disabled')

    # When we use the sequencer it's always for a single state
    mbf.set('SEQ:PC_S', 1)
    mbf.set('SEQ:SUPER:COUNT_S', 1)


# Basic configuration of MMS
def configure_mms(mbf, part):
    mbf.set('%s:MMS:SCAN_S.SCAN' % part, '.1 second')
    mbf.set('%s:MMS_SOURCE_S' % part, 'Before FIR')
    return mbf.PV('%s:MMS:MAX' % part)



# We'll gather final configuration parameters for printout at the end.
class Results:
    def __init__(self, mbf):
        self.__dict__['bunches'] = mbf.bunches
        self.__dict__['items'] = []

    def set(self, name, value):
        self.items.append(name)
        self.__dict__[name] = value

    def __setattr__(self, name, value):
        self.set(name, value)

    def print_results(self, output = sys.stdout):
        for item in self.items:
            print >>output, item, '=', getattr(self, item)


# ------------------------------------------------------------------------------
# Data shaping and analysis

# Returns a waveform with one bunch set to value, all other bunches set to
# other.  Used for single bunch control.
@MBF.method
def one_bunch(mbf, value, other, bunch = 0):
    result = numpy.empty(mbf.bunches, dtype = int)
    result[:] = other
    result[bunch] = value
    return result


# Most of the delays we're correcting are small, however we can only measure
# delays in the range 0..mbf.bunches-1.  On this assumption, convert large
# delays into negative values.
@MBF.method
def fixup_delay(mbf, value):
    if value < 0:
        return value + mbf.bunches
    elif value >= mbf.bunches / 2:
        return value - mbf.bunches
    else:
        return value


# Searches for one non-zero value in waveform
@MBF.method
def find_one_peak(mbf, value):
    hits = numpy.nonzero(value)[0]
    assert len(hits) == 1, 'Unexpected data: %s' % value
    return mbf.fixup_delay(hits[0])


# Searches for second highest value in waveform
def find_second_peak(value):
    return numpy.argsort(value)[-2]


@MBF.method
def find_mms_peak(mbf, mms, nco_freq = 0):
    if nco_freq:
        mbf.set('NCO:FREQ_S', nco_freq)
    peak = mbf.find_one_peak(mms.get_new(0.25))
    if nco_freq:
        mbf.set('NCO:FREQ_S', 0)
    return peak


# ------------------------------------------------------------------------------
# Configuration functions


# Configure bank for single pulse output from NCO
@MBF.method
def configure_dac_single_pulse(mbf):
    mbf.bank_wf(0, 1, FIR_UNIT, mbf.one_bunch(DAC_OUT.NCO, DAC_OUT.OFF))


# Configure for closed loop delay measurement: pass all data except reference
# bunch through identity FIR.
@MBF.method
def configure_dac_measure_loop(mbf):
    mbf.set('DAC:DELAY_S', 0)
    mbf.set('FIR:GAIN_S', '0dB')
    mbf.bank_wf(0, 1, FIR_UNIT, mbf.one_bunch(DAC_OUT.NCO, DAC_OUT.FIR))


# Fetch DRAM buffer
@MBF.method
def get_dram_peaks(mbf, wf0, wf1, sources, length):
    mbf.set('MEM:SELECT_S', sources)
    mbf.set('MEM:CAPTURE_S.PROC', 0)
    a = wf0.get()[mbf.bunches:][:length]
    b = wf1.get()[mbf.bunches:][:length]
    return find_one_peak(mbf, a), find_one_peak(mbf, b)


# Classical binary search.  test(a,b) should return true iff the target is in
# the half open range [a,b), and the test range is [start,end).
def binary_search(start, end, test):
    assert test(start, end), 'Nothing present to search for!'
    while end - start > 1:
        middle = (start + end) / 2
        if test(start, middle):
            end = middle
        else:
            start = middle
    return start


# Common core of detector bunch search
def search_detector_bunch(mbf, bunches_pv, measure):
    def test(start, end):
        outwf = numpy.empty(mbf.bunches, dtype = int)
        outwf[:start] = 0
        outwf[start:end] = 1
        outwf[end:] = 0
        mbf.set(bunches_pv, outwf)
        return measure()

    # Note that we have to negate the returned delay so that hardware.c can do
    # the compensation in the most straightforward way.
    return mbf.fixup_delay(-binary_search(0, mbf.bunches, test))


# Performs binary search to discover which bunch is detected for bunch zero
@MBF.method
def search_det_bunch(mbf, det_power, source, nco_freq = 0):
    # Configure source
    mbf.set('DET:SELECT_S', source)
    if nco_freq:
        mbf.set('NCO:FREQ_S', nco_freq)

    def measure():
        # Fire a capture
        mbf.set('TRG:SEQ:ARM_S', 0)
        mbf.set_shared('TRG:SOFT_S', 0)

        return numpy.isfinite(det_power.get())

    return search_detector_bunch(mbf, 'DET:0:BUNCHES_S', measure)

    if nco_freq:
        mbf.set('NCO:FREQ_S', 0)
    return delay


# Tune PLL specific detector bunch search
@MBF.method
def search_pll_det_bunch(mbf, det_power, source, nco_freq = 0):
    # Configure source
    mbf.set('PLL:DET:SELECT_S', source)
    if nco_freq:
        mbf.set('PLL:NCO:FREQ_S', nco_freq)

    def measure():
        oldpower = det_power.get_new()
        power = det_power.get_new()
        return power > 1e-4

    delay = search_detector_bunch(mbf, 'PLL:DET:BUNCHES_S', measure)

    if nco_freq:
        mbf.set('PLL:NCO:FREQ_S', 0)
    return delay


# Computes group delay from scaled IQ.
def compute_group_delay(mbf, scale, iq):
    angle = numpy.unwrap(numpy.angle(iq))
    fit = numpy.polyfit(scale, angle, 1)
    slope = fit[0]
    mean_error = numpy.std(angle - numpy.polyval(fit, scale))
    assert mean_error < 0.001, 'Unexpected error in slope fit'

    # Convert slope into revolutions per bunch to get group delay (frequency
    # scale is in units of tune).
    return int(round(slope/2/numpy.pi * mbf.bunches))


def get_detector_delay(mbf, source, pvs):
    mbf.set('DET:SELECT_S', source)

    mbf.set('TRG:SEQ:ARM_S', 0)
    mbf.set_shared('TRG:SOFT_S', 0)

    wf_i = pvs.det_i
    wf_q = pvs.det_q
    iq = wf_i + 1j * wf_q
    s = mbf.get('DET:SCALE')
    return compute_group_delay(mbf, s, iq)



# ------------------------------------------------------------------------------
# Measurement functions


# This must be done first before all other measurements
def measure_loop(mbf, results):
    print >>sys.stderr, 'Measuring closed loop delay'

    mbf.configure_dac_single_pulse()

    # Monitor MMS and configure for rapid update rate
    maxdac = configure_mms(mbf, 'DAC')

    # Take DAC output mux select bunch zero as the reference bunch
    # and measure delays to DAC max.  This allows us to measure the closed
    # loop delay and close the loop for all remaining measurements.
    dac_minmax_delay = mbf.find_mms_peak(maxdac)
    results.MMS_DAC_DELAY = dac_minmax_delay

    # Measure loop delay
    mbf.configure_dac_measure_loop()
    loop_delay = find_second_peak(maxdac.get_new(0.25)) - dac_minmax_delay
    print 'Closed loop delay:', loop_delay

    # Close the loop for future measurements.
    mbf.set('DAC:DELAY_S', mbf.bunches - loop_delay)

    maxdac.close()

    return dac_minmax_delay


# Perform measurements to DAC MMS.  The loop delay has already been measured and
# closed.  Here we can measure the offset of the gain control and the extra
# delay for measuring MMS after the preemphasis FIR.
#
# We shouldn't need to measure skew between the three enables as they are
# engineered to be synchronous.
def measure_dac_mms(mbf, results):
    print >>sys.stderr, 'Measuring DAC MMS'

    mbf.configure_dac_single_pulse()
    maxdac = configure_mms(mbf, 'DAC')
    maxadc = configure_mms(mbf, 'ADC')

    # Measure the MMS ADC skew now we've closed the loop
    mbf.set('ADC:MMS_SOURCE_S', 'Before FIR')
    results.MMS_ADC_DELAY = mbf.find_mms_peak(maxadc)
    mbf.set('ADC:MMS_SOURCE_S', 'After FIR')
    results.MMS_ADC_FIR_DELAY = mbf.find_mms_peak(maxadc)

    # For the fill pattern reject measurement we need to use an NCO frequency
    # that will get through the filter.
    mbf.set('ADC:MMS_SOURCE_S', 'FIR no fill')
    results.MMS_ADC_REJECT_DELAY = mbf.find_mms_peak(maxadc, nco_freq = 0.51)

    # Measure gain skew: configure NCO on all bunches, but unit gain only on
    # bunch zero, zero gain elsewhere.
    mbf.bank_wf(0, mbf.one_bunch(1, 0), FIR_UNIT, DAC_OUT.NCO)
    results.BUNCH_GAIN_OFFSET = mbf.find_mms_peak(maxdac) - dac_minmax_delay

    # Now capture the extra FIR delay
    mbf.configure_dac_single_pulse()
    mbf.set('DAC:MMS_SOURCE_S', 'After FIR')
    results.MMS_DAC_FIR_DELAY = find_mms_peak(mbf, maxdac)

    maxdac.close()
    maxadc.close()


def measure_dram(mbf, results):
    print >>sys.stderr, 'Measuring DRAM delays'

    dram = DRAM(mbf)

    mbf.configure_dac_single_pulse()

    # First get the baseline ADC and DAC delay.
    mbf.set('DAC:DRAM_SOURCE_S', 'Before FIR')
    mbf.set('ADC:DRAM_SOURCE_S', 'Before FIR')
    results.DRAM_ADC_DELAY, results.DRAM_DAC_DELAY = dram.get_peaks('ADC0/DAC0')

    # Same, but after FIR
    mbf.set('DAC:DRAM_SOURCE_S', 'After FIR')
    mbf.set('ADC:DRAM_SOURCE_S', 'After FIR')
    results.DRAM_ADC_FIR_DELAY, results.DRAM_DAC_FIR_DELAY = \
        dram.get_peaks('ADC0/DAC0')

    # One last sample for the ADC fill reject delay
    mbf.set('ADC:DRAM_SOURCE_S', 'FIR no fill')
    results.DRAM_ADC_REJECT_DELAY, _ = dram.get_peaks('ADC0/DAC0', 0.51)

    # Now get the FIR delay
    base_fir_delay, _ = dram.get_peaks('FIR0/DAC0')
    results.DRAM_FIR_DELAY = base_fir_delay

    # Now work out the FIR select skew.  Output NCO0 on all bunches, only set
    # bunch zero to non zero FIR.
    mbf.bank_wf(0, 1, mbf.one_bunch(FIR_UNIT, FIR_ZERO), DAC_OUT.NCO)
    _, fir = dram.get('ADC0/FIR0')
    results.BUNCH_FIR_OFFSET = mbf.find_one_peak(fir) - base_fir_delay


def measure_det_bunch(mbf, results):
    print >>sys.stderr, 'Measuring Detector Bunch Offsets'

    # Set up sequencer to do a small short sweep.  We only sweep bunch 0
    mbf.state(1, bank = 0)
    mbf.bank_wf(0, 1, 0, mbf.one_bunch(DAC_OUT.NCO, DAC_OUT.OFF))

    power = mbf.PV('DET:0:MAX_POWER')

    results.DET_ADC_OFFSET = mbf.search_det_bunch(power, 'ADC')
    results.DET_FIR_OFFSET = mbf.search_det_bunch(power, 'FIR')
    results.DET_ADC_REJECT_OFFSET = \
        mbf.search_det_bunch(power, 'ADC no fill', nco_freq = 0.51)

    power.close()


def measure_detector_delay(mbf, results):
    print >>sys.stderr, 'Measuring Detector Phase Delays'

    mbf.state(1, start = 1, step = 0.001, dwell = 20, holdoff = 10)
    mbf.bank_wf(1, 1, FIR_UNIT, DAC_OUT.SWEEP)
    mbf.set('DET:0:BUNCHES_S', numpy.ones(mbf.bunches))
    mbf.set('DET:FIR_DELAY_S', 1)

    pvs = PV_set(mbf)
    pvs.det_i = 'DET:0:I'
    pvs.det_q = 'DET:0:Q'

    results.DET_FIR_DELAY = get_detector_delay(mbf, 'FIR', pvs)
    results.DET_ADC_DELAY = get_detector_delay(mbf, 'ADC', pvs)

    # For the fill pattern reject filter we have to work a bit harder.  We'll
    # use the super-sequencer to sweep over a range of central regions
    mbf.state(1, start = 0.45, step = 0.1/512, count = 512, dwell = 128)
    mbf.set('SEQ:SUPER:COUNT_S', 8)
    mbf.set('SEQ:SUPER:RESET_S', 0)
    mbf.set('ADC:REJECT_COUNT_S', '64 turns')
    results.DET_ADC_REJECT_DELAY = get_detector_delay(mbf, 'ADC no fill', pvs)


def measure_tune_pll_bunch(mbf, results):
    print >>sys.stderr, 'Measuring Tune PLL Bunch Offsets'

    # Generate single pulse in DAC zero position
    mbf.bank_wf(0, 1, 0, mbf.one_bunch(DAC_OUT.PLL, DAC_OUT.OFF))

    # Drive tune PLL NCO output
    mbf.set('PLL:NCO:FREQ_S', 0)
    mbf.set('PLL:NCO:GAIN_S', '0dB')
    mbf.set('PLL:NCO:ENABLE_S', 'On')
    # Configure detector
    mbf.set('PLL:DET:DWELL_S', 100)
    mbf.set('PLL:DET:SCALING_S', '0dB')

    power = mbf.PV('PLL:FILT:MAG')

    results.PLL_ADC_OFFSET = mbf.search_pll_det_bunch(power, 'ADC')
    results.PLL_FIR_OFFSET = mbf.search_pll_det_bunch(power, 'FIR')
    results.PLL_ADC_REJECT_OFFSET = \
        mbf.search_pll_det_bunch(power, 'ADC no fill', nco_freq = 0.51)


# ------------------------------------------------------------------------------

actions = [
    'dac_mms',
    'dram',
    'det_bunch',
    'detector_delay',
    'tune_pll_bunch',
]


import argparse
parser = argparse.ArgumentParser(description = 'Measure internal MBF delays')
parser.add_argument('mbf', nargs = '?', default = 'TS-DI-TMBF-02',
    help = 'MBF machine name to test')
parser.add_argument('-m', '--measure', action = 'append',
    help = 'Specify measurements to perform, any of: ' + ', '.join(actions))
parser.add_argument('-o', '--output',
    help = 'Specify output file')
parser.add_argument('--skip-init', action = 'store_true', default = False,
    help = 'Bypass initial loop measurement.  Testing only!')
args = parser.parse_args()


mbf = MBF(args.mbf)
results = Results(mbf)

mbf.configure_timing_test()

if not args.skip_init:
    dac_minmax_delay = measure_loop(mbf, results)

if args.measure:
    actions = args.measure
for action in actions:
    globals()['measure_' + action](mbf, results)

results.print_results()
if args.output:
    with open(args.output, 'w') as output:
        print >>output, '# Automatically generated FPGA delays'
        results.print_results(output)

# vim: set filetype=python:
