/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package MBF;

import static MBF.MainPanel.errWin;
import fr.esrf.tangoatk.core.AttributePolledList;
import fr.esrf.tangoatk.core.AttributeStateEvent;
import fr.esrf.tangoatk.core.ConnectionException;
import fr.esrf.tangoatk.core.EnumScalarEvent;
import fr.esrf.tangoatk.core.ErrorEvent;
import fr.esrf.tangoatk.core.IEnumScalarListener;
import fr.esrf.tangoatk.core.attribute.EnumScalar;
import fr.esrf.tangoatk.core.attribute.NumberScalar;
import fr.esrf.tangoatk.core.attribute.StringScalar;
import fr.esrf.tangoatk.widget.util.ATKConstant;
import fr.esrf.tangoatk.widget.util.ATKGraphicsUtils;
import java.awt.BorderLayout;
import javax.swing.JPanel;

/**
 *
 * @author pons
 */
public class GlobalTriggerPanel extends javax.swing.JFrame implements IEnumScalarListener {

  TriggerInputPanel _inputPanel;
  private AttributePolledList attList;
  private String devName;
  private EnumScalar blank;

  /**
   * Creates new form GlobalTriggerPanel
   */
  public GlobalTriggerPanel() {
    
    initComponents();
    
    attList = new AttributePolledList();
    attList.addErrorListener(errWin);
    attList.setForceRefresh(false);
    attList.setSynchronizedPeriod(true);
    this.devName = devName;

    _inputPanel = TriggerInputPanel.createPanel();
    inputPanel.add(_inputPanel,BorderLayout.CENTER);
    
    try {
      
      EnumScalar mode = (EnumScalar)attList.add(MainPanel.mfdbkGEpicsDevName+"/TRG_MODE_S");
      modeEditor.setEnumModel(mode);
      EnumScalar status = (EnumScalar)attList.add(MainPanel.mfdbkGEpicsDevName+"/TRG_STATUS");
      statusViewer.setModel(status);
      statusViewer.setHorizontalAlignment(0);
      StringScalar trigShared = (StringScalar)attList.add(MainPanel.mfdbkGEpicsDevName+"/TRG_SHARED");
      trigSharedViewer.setModel(trigShared);
      trigSharedViewer.setHorizontalAlignment(0);
      
      NumberScalar adc0Limit = (NumberScalar)attList.add(MainPanel.mfdbkVEpicsDevName+"/ADC_EVENT_LIMIT_S");
      adc0LimitEditor.setModel(adc0Limit);
      NumberScalar adc1Limit = (NumberScalar)attList.add(MainPanel.mfdbkHEpicsDevName+"/ADC_EVENT_LIMIT_S");
      adc1LimitEditor.setModel(adc1Limit);
      NumberScalar seq0State = (NumberScalar)attList.add(MainPanel.mfdbkVEpicsDevName+"/SEQ_TRIGGER_S");
      seq0StateEditor.setModel(seq0State);
      NumberScalar seq1State = (NumberScalar)attList.add(MainPanel.mfdbkHEpicsDevName+"/SEQ_TRIGGER_S");
      seq1StateEditor.setModel(seq1State);
      
      EnumScalar hMode = (EnumScalar)attList.add(MainPanel.mfdbkHEpicsDevName+"/TRG_SEQ_MODE_S");
      hSeqModeEditor.setEnumModel(hMode);
      EnumScalar hStatus = (EnumScalar)attList.add(MainPanel.mfdbkHEpicsDevName+"/TRG_SEQ_STATUS");
      hStatusViewer.setModel(hStatus);
      hStatusViewer.setHorizontalAlignment(0);
      
      EnumScalar vMode = (EnumScalar)attList.add(MainPanel.mfdbkVEpicsDevName+"/TRG_SEQ_MODE_S");
      vSeqModeEditor.setEnumModel(vMode);
      EnumScalar vStatus = (EnumScalar)attList.add(MainPanel.mfdbkVEpicsDevName+"/TRG_SEQ_STATUS");
      vStatusViewer.setModel(vStatus);
      vStatusViewer.setHorizontalAlignment(0);
      
      EnumScalar memMode = (EnumScalar)attList.add(MainPanel.mfdbkGEpicsDevName+"/TRG_MEM_MODE_S");
      memModeEditor.setEnumModel(memMode);
      EnumScalar memStatus = (EnumScalar)attList.add(MainPanel.mfdbkGEpicsDevName+"/TRG_MEM_STATUS");
      memStatusViewer.setModel(memStatus);
      memStatusViewer.setHorizontalAlignment(0);

      NumberScalar blankWindow = (NumberScalar)attList.add(MainPanel.mfdbkGEpicsDevName+"/TRG_BLANKING_S");
      blankWindowEditor.setModel(blankWindow);
      
      EnumScalar scan = (EnumScalar)attList.add(MainPanel.mfdbkGEpicsDevName+"/TRG_SOFT_S");
      scanEditor.setEnumModel(scan);

      blank = (EnumScalar)attList.add(MainPanel.mfdbkGEpicsDevName+"/TRG_BLNK_IN");
      blank.addEnumScalarListener(this);

    } catch (ConnectionException ex) {      
    }
    
    attList.setRefreshInterval(1000);
    setTitle("Trigger Setup");
    ATKGraphicsUtils.centerFrameOnScreen(this);
    
  }
  
  public void setVisible(boolean visible) {
    
    if(visible)
      attList.startRefresher();
    else
      attList.stopRefresher();    
    
    // Update visibility of the inputPanel is order to update its refresher
    _inputPanel.visible(visible);
    
    super.setVisible(visible);
    
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {
    java.awt.GridBagConstraints gridBagConstraints;

    btnPanel = new javax.swing.JPanel();
    dismissButton = new javax.swing.JButton();
    softTrigPanel = new javax.swing.JPanel();
    softButton = new javax.swing.JButton();
    scanEditor = new fr.esrf.tangoatk.widget.attribute.EnumScalarComboEditor();
    inputPanel = new javax.swing.JPanel();
    targetsPanel = new javax.swing.JPanel();
    hBtn = new javax.swing.JButton();
    hSeqModeEditor = new fr.esrf.tangoatk.widget.attribute.EnumScalarComboEditor();
    hArmButton = new javax.swing.JButton();
    hDisarmButton = new javax.swing.JButton();
    hStatusViewer = new fr.esrf.tangoatk.widget.attribute.SimpleEnumScalarViewer();
    vBtn = new javax.swing.JButton();
    vSeqModeEditor = new fr.esrf.tangoatk.widget.attribute.EnumScalarComboEditor();
    vArmButton = new javax.swing.JButton();
    vDisarmButton = new javax.swing.JButton();
    vStatusViewer = new fr.esrf.tangoatk.widget.attribute.SimpleEnumScalarViewer();
    memBtn = new javax.swing.JButton();
    memModeEditor = new fr.esrf.tangoatk.widget.attribute.EnumScalarComboEditor();
    memArmButton = new javax.swing.JButton();
    memDisarmButton = new javax.swing.JButton();
    memStatusViewer = new fr.esrf.tangoatk.widget.attribute.SimpleEnumScalarViewer();
    armingPanel = new javax.swing.JPanel();
    modeEditor = new fr.esrf.tangoatk.widget.attribute.EnumScalarComboEditor();
    armButton = new javax.swing.JButton();
    disarmButton = new javax.swing.JButton();
    jSmoothLabel2 = new fr.esrf.tangoatk.widget.util.JSmoothLabel();
    statusViewer = new fr.esrf.tangoatk.widget.attribute.SimpleEnumScalarViewer();
    trigSharedViewer = new fr.esrf.tangoatk.widget.attribute.SimpleScalarViewer();
    eventPanel = new javax.swing.JPanel();
    jSmoothLabel1 = new fr.esrf.tangoatk.widget.util.JSmoothLabel();
    adc0LimitEditor = new fr.esrf.tangoatk.widget.attribute.NumberScalarWheelEditor();
    jSmoothLabel3 = new fr.esrf.tangoatk.widget.util.JSmoothLabel();
    adc1LimitEditor = new fr.esrf.tangoatk.widget.attribute.NumberScalarWheelEditor();
    jSmoothLabel4 = new fr.esrf.tangoatk.widget.util.JSmoothLabel();
    seq0StateEditor = new fr.esrf.tangoatk.widget.attribute.NumberScalarWheelEditor();
    jSmoothLabel5 = new fr.esrf.tangoatk.widget.util.JSmoothLabel();
    seq1StateEditor = new fr.esrf.tangoatk.widget.attribute.NumberScalarWheelEditor();
    blankingPanel = new javax.swing.JPanel();
    jSmoothLabel6 = new fr.esrf.tangoatk.widget.util.JSmoothLabel();
    blankPanel = new javax.swing.JPanel();
    blankWindowEditor = new fr.esrf.tangoatk.widget.attribute.NumberScalarWheelEditor();
    jSmoothLabel7 = new fr.esrf.tangoatk.widget.util.JSmoothLabel();
    jPanel1 = new javax.swing.JPanel();

    getContentPane().setLayout(new java.awt.GridBagLayout());

    btnPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

    dismissButton.setText("Dismiss");
    dismissButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        dismissButtonActionPerformed(evt);
      }
    });
    btnPanel.add(dismissButton);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 4;
    gridBagConstraints.gridwidth = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    getContentPane().add(btnPanel, gridBagConstraints);

    softTrigPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Soft Trig"));
    softTrigPanel.setLayout(new java.awt.GridBagLayout());

    softButton.setText("Soft");
    softButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        softButtonActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 7;
    gridBagConstraints.gridwidth = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.insets = new java.awt.Insets(2, 0, 2, 0);
    softTrigPanel.add(softButton, gridBagConstraints);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 8;
    gridBagConstraints.gridwidth = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.insets = new java.awt.Insets(2, 0, 2, 0);
    softTrigPanel.add(scanEditor, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 3;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    getContentPane().add(softTrigPanel, gridBagConstraints);

    inputPanel.setLayout(new java.awt.BorderLayout());
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.gridheight = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    getContentPane().add(inputPanel, gridBagConstraints);

    targetsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Targets"));
    targetsPanel.setLayout(new java.awt.GridBagLayout());

    hBtn.setText("Horizontal...");
    hBtn.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        hBtnActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
    targetsPanel.add(hBtn, gridBagConstraints);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
    targetsPanel.add(hSeqModeEditor, gridBagConstraints);

    hArmButton.setText("Arm");
    hArmButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        hArmButtonActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
    targetsPanel.add(hArmButton, gridBagConstraints);

    hDisarmButton.setText("Disarm");
    hDisarmButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        hDisarmButtonActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
    targetsPanel.add(hDisarmButton, gridBagConstraints);

    hStatusViewer.setBorder(null);
    hStatusViewer.setText("-----");
    hStatusViewer.setOpaque(false);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.ipadx = 30;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
    targetsPanel.add(hStatusViewer, gridBagConstraints);

    vBtn.setText("Vertical...");
    vBtn.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        vBtnActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
    targetsPanel.add(vBtn, gridBagConstraints);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
    targetsPanel.add(vSeqModeEditor, gridBagConstraints);

    vArmButton.setText("Arm");
    vArmButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        vArmButtonActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
    targetsPanel.add(vArmButton, gridBagConstraints);

    vDisarmButton.setText("Disarm");
    vDisarmButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        vDisarmButtonActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
    targetsPanel.add(vDisarmButton, gridBagConstraints);

    vStatusViewer.setBorder(null);
    vStatusViewer.setText("-----");
    vStatusViewer.setOpaque(false);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.ipadx = 30;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
    targetsPanel.add(vStatusViewer, gridBagConstraints);

    memBtn.setText("Memory...");
    memBtn.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        memBtnActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridy = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
    targetsPanel.add(memBtn, gridBagConstraints);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridy = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
    targetsPanel.add(memModeEditor, gridBagConstraints);

    memArmButton.setText("Arm");
    memArmButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        memArmButtonActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridy = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
    targetsPanel.add(memArmButton, gridBagConstraints);

    memDisarmButton.setText("Disarm");
    memDisarmButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        memDisarmButtonActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridy = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
    targetsPanel.add(memDisarmButton, gridBagConstraints);

    memStatusViewer.setBorder(null);
    memStatusViewer.setText("-----");
    memStatusViewer.setOpaque(false);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridy = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.ipadx = 30;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
    targetsPanel.add(memStatusViewer, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    getContentPane().add(targetsPanel, gridBagConstraints);

    armingPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Arming"));
    armingPanel.setLayout(new java.awt.GridBagLayout());
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
    armingPanel.add(modeEditor, gridBagConstraints);

    armButton.setText("Arm");
    armButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        armButtonActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
    armingPanel.add(armButton, gridBagConstraints);

    disarmButton.setText("Disarm");
    disarmButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        disarmButtonActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
    armingPanel.add(disarmButton, gridBagConstraints);

    jSmoothLabel2.setOpaque(false);
    jSmoothLabel2.setText("Shared targets");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
    armingPanel.add(jSmoothLabel2, gridBagConstraints);

    statusViewer.setBorder(null);
    statusViewer.setText("-----");
    statusViewer.setOpaque(false);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.ipadx = 30;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
    armingPanel.add(statusViewer, gridBagConstraints);

    trigSharedViewer.setBorder(null);
    trigSharedViewer.setText("-----");
    trigSharedViewer.setOpaque(false);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.gridwidth = 3;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
    armingPanel.add(trigSharedViewer, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridwidth = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    getContentPane().add(armingPanel, gridBagConstraints);

    eventPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Event configuration"));
    eventPanel.setLayout(new java.awt.GridBagLayout());

    jSmoothLabel1.setOpaque(false);
    jSmoothLabel1.setText("ADC0 limit");
    eventPanel.add(jSmoothLabel1, new java.awt.GridBagConstraints());

    adc0LimitEditor.setOpaque(false);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    eventPanel.add(adc0LimitEditor, gridBagConstraints);

    jSmoothLabel3.setOpaque(false);
    jSmoothLabel3.setText("ADC1 limit");
    eventPanel.add(jSmoothLabel3, new java.awt.GridBagConstraints());

    adc1LimitEditor.setOpaque(false);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 1;
    eventPanel.add(adc1LimitEditor, gridBagConstraints);

    jSmoothLabel4.setOpaque(false);
    jSmoothLabel4.setText("Seq0 state");
    eventPanel.add(jSmoothLabel4, new java.awt.GridBagConstraints());

    seq0StateEditor.setOpaque(false);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.gridy = 1;
    eventPanel.add(seq0StateEditor, gridBagConstraints);

    jSmoothLabel5.setOpaque(false);
    jSmoothLabel5.setText("Seq1 state");
    eventPanel.add(jSmoothLabel5, new java.awt.GridBagConstraints());

    seq1StateEditor.setOpaque(false);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 3;
    gridBagConstraints.gridy = 1;
    eventPanel.add(seq1StateEditor, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 3;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weighty = 1.0;
    getContentPane().add(eventPanel, gridBagConstraints);

    blankingPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Blanking Window"));
    blankingPanel.setLayout(new java.awt.GridBagLayout());

    jSmoothLabel6.setFocusable(false);
    jSmoothLabel6.setOpaque(false);
    jSmoothLabel6.setText("BLANK");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.ipady = 8;
    gridBagConstraints.insets = new java.awt.Insets(0, 2, 2, 0);
    blankingPanel.add(jSmoothLabel6, gridBagConstraints);

    blankPanel.setBackground(new java.awt.Color(128, 128, 128));
    blankPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
    blankPanel.setPreferredSize(new java.awt.Dimension(25, 20));

    javax.swing.GroupLayout blankPanelLayout = new javax.swing.GroupLayout(blankPanel);
    blankPanel.setLayout(blankPanelLayout);
    blankPanelLayout.setHorizontalGroup(
      blankPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 0, Short.MAX_VALUE)
    );
    blankPanelLayout.setVerticalGroup(
      blankPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 0, Short.MAX_VALUE)
    );

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.insets = new java.awt.Insets(10, 2, 10, 2);
    blankingPanel.add(blankPanel, gridBagConstraints);

    blankWindowEditor.setOpaque(false);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
    blankingPanel.add(blankWindowEditor, gridBagConstraints);

    jSmoothLabel7.setFocusable(false);
    jSmoothLabel7.setOpaque(false);
    jSmoothLabel7.setText("turns");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.ipady = 8;
    gridBagConstraints.insets = new java.awt.Insets(0, 2, 2, 0);
    blankingPanel.add(jSmoothLabel7, gridBagConstraints);

    javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
    jPanel1.setLayout(jPanel1Layout);
    jPanel1Layout.setHorizontalGroup(
      jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 0, Short.MAX_VALUE)
    );
    jPanel1Layout.setVerticalGroup(
      jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 0, Short.MAX_VALUE)
    );

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.gridwidth = 4;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weighty = 1.0;
    blankingPanel.add(jPanel1, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    getContentPane().add(blankingPanel, gridBagConstraints);

    pack();
  }// </editor-fold>//GEN-END:initComponents

  private void dismissButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dismissButtonActionPerformed
    setVisible(false);
  }//GEN-LAST:event_dismissButtonActionPerformed

  private void softButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_softButtonActionPerformed
    Utils.execCommand(MainPanel.mfdbkGEpicsDevName, "TRG_SOFT_CMD");
  }//GEN-LAST:event_softButtonActionPerformed

  private void armButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_armButtonActionPerformed
    Utils.execCommand(MainPanel.mfdbkGEpicsDevName, "TRG_ARM_S");
  }//GEN-LAST:event_armButtonActionPerformed

  private void disarmButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_disarmButtonActionPerformed
    Utils.execCommand(MainPanel.mfdbkGEpicsDevName, "TRG_DISARM_S");
  }//GEN-LAST:event_disarmButtonActionPerformed

  private void hArmButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hArmButtonActionPerformed
     Utils.execCommand(MainPanel.mfdbkHEpicsDevName, "TRG_SEQ_ARM_S");
  }//GEN-LAST:event_hArmButtonActionPerformed

  private void hDisarmButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hDisarmButtonActionPerformed
     Utils.execCommand(MainPanel.mfdbkHEpicsDevName, "TRG_SEQ_DISARM_S");
  }//GEN-LAST:event_hDisarmButtonActionPerformed

  private void vArmButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vArmButtonActionPerformed
     Utils.execCommand(MainPanel.mfdbkVEpicsDevName, "TRG_SEQ_ARM_S");
  }//GEN-LAST:event_vArmButtonActionPerformed

  private void vDisarmButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vDisarmButtonActionPerformed
     Utils.execCommand(MainPanel.mfdbkVEpicsDevName, "TRG_SEQ_DISARM_S");
  }//GEN-LAST:event_vDisarmButtonActionPerformed

  private void memArmButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_memArmButtonActionPerformed
     Utils.execCommand(MainPanel.mfdbkGEpicsDevName, "TRG_MEM_ARM_S");
  }//GEN-LAST:event_memArmButtonActionPerformed

  private void memDisarmButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_memDisarmButtonActionPerformed
     Utils.execCommand(MainPanel.mfdbkGEpicsDevName, "TRG_MEM_DISARM_S");
  }//GEN-LAST:event_memDisarmButtonActionPerformed

  private void hBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hBtnActionPerformed
    Utils.showHSEQTrigger();
  }//GEN-LAST:event_hBtnActionPerformed

  private void vBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vBtnActionPerformed
    Utils.showVSEQTrigger();
  }//GEN-LAST:event_vBtnActionPerformed

  private void memBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_memBtnActionPerformed
    Utils.showMEMTrigger();
  }//GEN-LAST:event_memBtnActionPerformed

  /**
   * @param args the command line arguments
   */
  public static void main(String args[]) {
    /* Set the Nimbus look and feel */
    //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
    /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
     */
    try {
      for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
        if ("Nimbus".equals(info.getName())) {
          javax.swing.UIManager.setLookAndFeel(info.getClassName());
          break;
        }
      }
    } catch (ClassNotFoundException ex) {
      java.util.logging.Logger.getLogger(GlobalTriggerPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (InstantiationException ex) {
      java.util.logging.Logger.getLogger(GlobalTriggerPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (IllegalAccessException ex) {
      java.util.logging.Logger.getLogger(GlobalTriggerPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (javax.swing.UnsupportedLookAndFeelException ex) {
      java.util.logging.Logger.getLogger(GlobalTriggerPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }
    //</editor-fold>

    /* Create and display the form */
    java.awt.EventQueue.invokeLater(new Runnable() {
      public void run() {
        new GlobalTriggerPanel().setVisible(true);
      }
    });
  }

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private fr.esrf.tangoatk.widget.attribute.NumberScalarWheelEditor adc0LimitEditor;
  private fr.esrf.tangoatk.widget.attribute.NumberScalarWheelEditor adc1LimitEditor;
  private javax.swing.JButton armButton;
  private javax.swing.JPanel armingPanel;
  private javax.swing.JPanel blankPanel;
  private fr.esrf.tangoatk.widget.attribute.NumberScalarWheelEditor blankWindowEditor;
  private javax.swing.JPanel blankingPanel;
  private javax.swing.JPanel btnPanel;
  private javax.swing.JButton disarmButton;
  private javax.swing.JButton dismissButton;
  private javax.swing.JPanel eventPanel;
  private javax.swing.JButton hArmButton;
  private javax.swing.JButton hBtn;
  private javax.swing.JButton hDisarmButton;
  private fr.esrf.tangoatk.widget.attribute.EnumScalarComboEditor hSeqModeEditor;
  private fr.esrf.tangoatk.widget.attribute.SimpleEnumScalarViewer hStatusViewer;
  private javax.swing.JPanel inputPanel;
  private javax.swing.JPanel jPanel1;
  private fr.esrf.tangoatk.widget.util.JSmoothLabel jSmoothLabel1;
  private fr.esrf.tangoatk.widget.util.JSmoothLabel jSmoothLabel2;
  private fr.esrf.tangoatk.widget.util.JSmoothLabel jSmoothLabel3;
  private fr.esrf.tangoatk.widget.util.JSmoothLabel jSmoothLabel4;
  private fr.esrf.tangoatk.widget.util.JSmoothLabel jSmoothLabel5;
  private fr.esrf.tangoatk.widget.util.JSmoothLabel jSmoothLabel6;
  private fr.esrf.tangoatk.widget.util.JSmoothLabel jSmoothLabel7;
  private javax.swing.JButton memArmButton;
  private javax.swing.JButton memBtn;
  private javax.swing.JButton memDisarmButton;
  private fr.esrf.tangoatk.widget.attribute.EnumScalarComboEditor memModeEditor;
  private fr.esrf.tangoatk.widget.attribute.SimpleEnumScalarViewer memStatusViewer;
  private fr.esrf.tangoatk.widget.attribute.EnumScalarComboEditor modeEditor;
  private fr.esrf.tangoatk.widget.attribute.EnumScalarComboEditor scanEditor;
  private fr.esrf.tangoatk.widget.attribute.NumberScalarWheelEditor seq0StateEditor;
  private fr.esrf.tangoatk.widget.attribute.NumberScalarWheelEditor seq1StateEditor;
  private javax.swing.JButton softButton;
  private javax.swing.JPanel softTrigPanel;
  private fr.esrf.tangoatk.widget.attribute.SimpleEnumScalarViewer statusViewer;
  private javax.swing.JPanel targetsPanel;
  private fr.esrf.tangoatk.widget.attribute.SimpleScalarViewer trigSharedViewer;
  private javax.swing.JButton vArmButton;
  private javax.swing.JButton vBtn;
  private javax.swing.JButton vDisarmButton;
  private fr.esrf.tangoatk.widget.attribute.EnumScalarComboEditor vSeqModeEditor;
  private fr.esrf.tangoatk.widget.attribute.SimpleEnumScalarViewer vStatusViewer;
  // End of variables declaration//GEN-END:variables

  private void setColor(JPanel panel,String value) {
    
    if(value.equalsIgnoreCase("Yes")) {
      panel.setBackground(ATKConstant.getColor4State("ON"));
    } else if(value.equalsIgnoreCase("No")) {
      panel.setBackground(ATKConstant.getColor4State("STANDBY"));
    } else {
      panel.setBackground(ATKConstant.getColor4State("UNKNOWN"));
    }
    
  }

  @Override
  public void enumScalarChange(EnumScalarEvent ese) {
    Object src =ese.getSource();
    String value = ese.getValue();    
    if(src==blank) {
      setColor(blankPanel,value);
    }
  }

  @Override
  public void stateChange(AttributeStateEvent ase) {
  }

  @Override
  public void errorChange(ErrorEvent ee) {
    Object src =ee.getSource();
    if(src==blank) {
      setColor(blankPanel,"");
    }
  }
  
}
