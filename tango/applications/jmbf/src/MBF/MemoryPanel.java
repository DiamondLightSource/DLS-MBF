/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package MBF;

import static MBF.MainPanel.errWin;
import fr.esrf.tangoatk.core.AttributePolledList;
import fr.esrf.tangoatk.core.AttributeStateEvent;
import fr.esrf.tangoatk.core.ConnectionException;
import fr.esrf.tangoatk.core.EnumScalarEvent;
import fr.esrf.tangoatk.core.ErrorEvent;
import fr.esrf.tangoatk.core.IEnumScalarListener;
import fr.esrf.tangoatk.core.attribute.EnumScalar;
import fr.esrf.tangoatk.core.attribute.NumberScalar;
import fr.esrf.tangoatk.core.attribute.NumberSpectrum;
import fr.esrf.tangoatk.widget.util.ATKConstant;
import fr.esrf.tangoatk.widget.util.ATKGraphicsUtils;
import java.awt.Dimension;

/**
 *
 * @author pons
 */
public class MemoryPanel extends javax.swing.JFrame implements IEnumScalarListener {

  private AttributePolledList attList;
  private EnumScalar fir0Overflow;
  private EnumScalar fir1Overflow;
  private EnumScalar captureStatus;

  /**
   * Creates new form MemoryPanel
   */
  public MemoryPanel() {
    
    initComponents();
    
    attList = new AttributePolledList();
    attList.addErrorListener(errWin);

    try {

      NumberSpectrum wf0 = (NumberSpectrum)attList.add(MainPanel.mfdbkGEpicsDevName+"/MEM_WF0");
      wf0Viewer.setModel(wf0);

      NumberSpectrum wf1 = (NumberSpectrum)attList.add(MainPanel.mfdbkGEpicsDevName+"/MEM_WF1");
      wf1Viewer.setModel(wf1);
      
      EnumScalar channel0 = (EnumScalar)attList.add(MainPanel.mfdbkGEpicsDevName+"/MEM_SEL0_S");
      channel0Editor.setEnumModel(channel0);
      EnumScalar channel1 = (EnumScalar)attList.add(MainPanel.mfdbkGEpicsDevName+"/MEM_SEL1_S");
      channel1Editor.setEnumModel(channel1);
      EnumScalar select = (EnumScalar)attList.add(MainPanel.mfdbkGEpicsDevName+"/MEM_SELECT_S");
      selectEditor.setEnumModel(select);
      
      EnumScalar hGain = (EnumScalar)attList.add(MainPanel.mfdbkGEpicsDevName+"/MEM_FIR1_GAIN_S");
      hGainEditor.setEnumModel(hGain);
      fir1Overflow = (EnumScalar)attList.add(MainPanel.mfdbkGEpicsDevName+"/MEM_FIR1_OVF");
      hGainViewer.setModel(fir1Overflow);
      fir1Overflow.addEnumScalarListener(this);
              
      EnumScalar vGain = (EnumScalar)attList.add(MainPanel.mfdbkGEpicsDevName+"/MEM_FIR0_GAIN_S");
      vGainEditor.setEnumModel(vGain);
      fir0Overflow = (EnumScalar)attList.add(MainPanel.mfdbkGEpicsDevName+"/MEM_FIR0_OVF");
      vGainViewer.setModel(fir0Overflow);
      fir0Overflow.addEnumScalarListener(this);
      
      
      NumberScalar offset = (NumberScalar)attList.add(MainPanel.mfdbkGEpicsDevName+"/MEM_OFFSET_S");
      offsetEditor.setModel(offset);
      EnumScalar runout = (EnumScalar)attList.add(MainPanel.mfdbkGEpicsDevName+"/MEM_RUNOUT_S");
      runoutEditor.setEnumModel(runout);
      captureStatus = (EnumScalar)attList.add(MainPanel.mfdbkGEpicsDevName+"/MEM_BUSY");
      captureStatusViewer.setModel(captureStatus);
      captureStatus.addEnumScalarListener(this);
            
    } catch (ConnectionException ex) {      
    }
    
    wf0Viewer.setHeader("Channel 0");
    wf0Viewer.setPreferredSize(new Dimension(800,300));
    wf0Viewer.getXAxis().setGridVisible(true);
    wf0Viewer.getY1Axis().setGridVisible(true);

    wf1Viewer.setHeader("Channel 0");
    wf1Viewer.setPreferredSize(new Dimension(800,300));
    wf1Viewer.getXAxis().setGridVisible(true);
    wf1Viewer.getY1Axis().setGridVisible(true);

    attList.setRefreshInterval(1000);
    
    setTitle("Memory [" + MainPanel.mfdbkGEpicsDevName + "]");
    ATKGraphicsUtils.centerFrameOnScreen(this);
    
  }
  
  
  public void setVisible(boolean visible) {
    if(visible)
      attList.startRefresher();
    else
      attList.stopRefresher();    
    super.setVisible(visible);
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {
    java.awt.GridBagConstraints gridBagConstraints;

    wf0Viewer = new fr.esrf.tangoatk.widget.attribute.NumberSpectrumViewer();
    wf1Viewer = new fr.esrf.tangoatk.widget.attribute.NumberSpectrumViewer();
    selectionPanel = new javax.swing.JPanel();
    jSmoothLabel2 = new fr.esrf.tangoatk.widget.util.JSmoothLabel();
    channel0Editor = new fr.esrf.tangoatk.widget.attribute.EnumScalarComboEditor();
    jSmoothLabel3 = new fr.esrf.tangoatk.widget.util.JSmoothLabel();
    channel1Editor = new fr.esrf.tangoatk.widget.attribute.EnumScalarComboEditor();
    jSmoothLabel4 = new fr.esrf.tangoatk.widget.util.JSmoothLabel();
    selectEditor = new fr.esrf.tangoatk.widget.attribute.EnumScalarComboEditor();
    jPanel2 = new javax.swing.JPanel();
    firPanel = new javax.swing.JPanel();
    jSmoothLabel1 = new fr.esrf.tangoatk.widget.util.JSmoothLabel();
    hGainEditor = new fr.esrf.tangoatk.widget.attribute.EnumScalarComboEditor();
    hGainStatusPanel = new javax.swing.JPanel();
    jSmoothLabel5 = new fr.esrf.tangoatk.widget.util.JSmoothLabel();
    hGainViewer = new fr.esrf.tangoatk.widget.attribute.SimpleEnumScalarViewer();
    vGainEditor = new fr.esrf.tangoatk.widget.attribute.EnumScalarComboEditor();
    vGainStatusPanel = new javax.swing.JPanel();
    jPanel1 = new javax.swing.JPanel();
    vGainViewer = new fr.esrf.tangoatk.widget.attribute.SimpleEnumScalarViewer();
    memoryPanel = new javax.swing.JPanel();
    jSmoothLabel6 = new fr.esrf.tangoatk.widget.util.JSmoothLabel();
    offsetEditor = new fr.esrf.tangoatk.widget.attribute.NumberScalarWheelEditor();
    jSmoothLabel7 = new fr.esrf.tangoatk.widget.util.JSmoothLabel();
    captureButton = new javax.swing.JButton();
    triggerButton = new javax.swing.JButton();
    jSmoothLabel8 = new fr.esrf.tangoatk.widget.util.JSmoothLabel();
    jSmoothLabel9 = new fr.esrf.tangoatk.widget.util.JSmoothLabel();
    runoutEditor = new fr.esrf.tangoatk.widget.attribute.EnumScalarComboEditor();
    captureGroupPanel = new javax.swing.JPanel();
    capturePanel = new javax.swing.JPanel();
    captureStatusViewer = new fr.esrf.tangoatk.widget.attribute.SimpleEnumScalarViewer();
    btnPanel = new javax.swing.JPanel();
    dismissButton = new javax.swing.JButton();

    getContentPane().setLayout(new java.awt.GridBagLayout());

    wf0Viewer.setBackground(java.awt.SystemColor.control);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridwidth = 3;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    getContentPane().add(wf0Viewer, gridBagConstraints);

    wf1Viewer.setBackground(java.awt.SystemColor.control);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.gridwidth = 3;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    getContentPane().add(wf1Viewer, gridBagConstraints);

    selectionPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Selection"));
    selectionPanel.setLayout(new java.awt.GridBagLayout());

    jSmoothLabel2.setHorizontalAlignment(0);
    jSmoothLabel2.setOpaque(false);
    jSmoothLabel2.setText("Channel 0");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
    selectionPanel.add(jSmoothLabel2, gridBagConstraints);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
    selectionPanel.add(channel0Editor, gridBagConstraints);

    jSmoothLabel3.setHorizontalAlignment(0);
    jSmoothLabel3.setOpaque(false);
    jSmoothLabel3.setText("Channel 1");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
    selectionPanel.add(jSmoothLabel3, gridBagConstraints);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
    selectionPanel.add(channel1Editor, gridBagConstraints);

    jSmoothLabel4.setHorizontalAlignment(0);
    jSmoothLabel4.setOpaque(false);
    jSmoothLabel4.setText("Select");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
    selectionPanel.add(jSmoothLabel4, gridBagConstraints);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
    selectionPanel.add(selectEditor, gridBagConstraints);

    javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
    jPanel2.setLayout(jPanel2Layout);
    jPanel2Layout.setHorizontalGroup(
      jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 0, Short.MAX_VALUE)
    );
    jPanel2Layout.setVerticalGroup(
      jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 0, Short.MAX_VALUE)
    );

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 3;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weighty = 1.0;
    selectionPanel.add(jPanel2, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    getContentPane().add(selectionPanel, gridBagConstraints);

    firPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("FIR Gain"));
    firPanel.setLayout(new java.awt.GridBagLayout());

    jSmoothLabel1.setOpaque(false);
    jSmoothLabel1.setText("Channel H");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
    firPanel.add(jSmoothLabel1, gridBagConstraints);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
    firPanel.add(hGainEditor, gridBagConstraints);

    hGainStatusPanel.setBackground(new java.awt.Color(153, 153, 153));
    hGainStatusPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
    hGainStatusPanel.setPreferredSize(new java.awt.Dimension(25, 20));

    javax.swing.GroupLayout hGainStatusPanelLayout = new javax.swing.GroupLayout(hGainStatusPanel);
    hGainStatusPanel.setLayout(hGainStatusPanelLayout);
    hGainStatusPanelLayout.setHorizontalGroup(
      hGainStatusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 0, Short.MAX_VALUE)
    );
    hGainStatusPanelLayout.setVerticalGroup(
      hGainStatusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 22, Short.MAX_VALUE)
    );

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
    firPanel.add(hGainStatusPanel, gridBagConstraints);

    jSmoothLabel5.setOpaque(false);
    jSmoothLabel5.setText("Channel V");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
    firPanel.add(jSmoothLabel5, gridBagConstraints);

    hGainViewer.setBorder(null);
    hGainViewer.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
    hGainViewer.setText("-----");
    hGainViewer.setOpaque(false);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 3;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.ipadx = 40;
    gridBagConstraints.weightx = 1.0;
    firPanel.add(hGainViewer, gridBagConstraints);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
    firPanel.add(vGainEditor, gridBagConstraints);

    vGainStatusPanel.setBackground(new java.awt.Color(153, 153, 153));
    vGainStatusPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
    vGainStatusPanel.setPreferredSize(new java.awt.Dimension(25, 20));

    javax.swing.GroupLayout vGainStatusPanelLayout = new javax.swing.GroupLayout(vGainStatusPanel);
    vGainStatusPanel.setLayout(vGainStatusPanelLayout);
    vGainStatusPanelLayout.setHorizontalGroup(
      vGainStatusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 0, Short.MAX_VALUE)
    );
    vGainStatusPanelLayout.setVerticalGroup(
      vGainStatusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 22, Short.MAX_VALUE)
    );

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
    firPanel.add(vGainStatusPanel, gridBagConstraints);

    javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
    jPanel1.setLayout(jPanel1Layout);
    jPanel1Layout.setHorizontalGroup(
      jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 140, Short.MAX_VALUE)
    );
    jPanel1Layout.setVerticalGroup(
      jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 52, Short.MAX_VALUE)
    );

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.gridwidth = 3;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weighty = 1.0;
    firPanel.add(jPanel1, gridBagConstraints);

    vGainViewer.setBorder(null);
    vGainViewer.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
    vGainViewer.setText("-----");
    vGainViewer.setOpaque(false);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 3;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.ipadx = 40;
    gridBagConstraints.weightx = 1.0;
    firPanel.add(vGainViewer, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    getContentPane().add(firPanel, gridBagConstraints);

    memoryPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Memory"));
    memoryPanel.setLayout(new java.awt.GridBagLayout());

    jSmoothLabel6.setHorizontalAlignment(0);
    jSmoothLabel6.setOpaque(false);
    jSmoothLabel6.setText("Offset");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
    memoryPanel.add(jSmoothLabel6, gridBagConstraints);

    offsetEditor.setOpaque(false);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
    memoryPanel.add(offsetEditor, gridBagConstraints);

    jSmoothLabel7.setHorizontalAlignment(0);
    jSmoothLabel7.setOpaque(false);
    jSmoothLabel7.setText("turns");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
    memoryPanel.add(jSmoothLabel7, gridBagConstraints);

    captureButton.setText("Capture");
    captureButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        captureButtonActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
    memoryPanel.add(captureButton, gridBagConstraints);

    triggerButton.setText("Trigger...");
    triggerButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        triggerButtonActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
    memoryPanel.add(triggerButton, gridBagConstraints);

    jSmoothLabel8.setHorizontalAlignment(0);
    jSmoothLabel8.setOpaque(false);
    jSmoothLabel8.setText("Capture status");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
    memoryPanel.add(jSmoothLabel8, gridBagConstraints);

    jSmoothLabel9.setHorizontalAlignment(0);
    jSmoothLabel9.setOpaque(false);
    jSmoothLabel9.setText("Runout");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
    memoryPanel.add(jSmoothLabel9, gridBagConstraints);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
    memoryPanel.add(runoutEditor, gridBagConstraints);

    captureGroupPanel.setLayout(new java.awt.GridBagLayout());

    capturePanel.setBackground(new java.awt.Color(153, 153, 153));
    capturePanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
    capturePanel.setPreferredSize(new java.awt.Dimension(25, 20));

    javax.swing.GroupLayout capturePanelLayout = new javax.swing.GroupLayout(capturePanel);
    capturePanel.setLayout(capturePanelLayout);
    capturePanelLayout.setHorizontalGroup(
      capturePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 23, Short.MAX_VALUE)
    );
    capturePanelLayout.setVerticalGroup(
      capturePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 18, Short.MAX_VALUE)
    );

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    captureGroupPanel.add(capturePanel, gridBagConstraints);

    captureStatusViewer.setBorder(null);
    captureStatusViewer.setText("-----");
    captureStatusViewer.setOpaque(false);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    captureGroupPanel.add(captureStatusViewer, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
    memoryPanel.add(captureGroupPanel, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    getContentPane().add(memoryPanel, gridBagConstraints);

    btnPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

    dismissButton.setText("Dismiss");
    dismissButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        dismissButtonActionPerformed(evt);
      }
    });
    btnPanel.add(dismissButton);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 3;
    gridBagConstraints.gridwidth = 3;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    getContentPane().add(btnPanel, gridBagConstraints);

    pack();
  }// </editor-fold>//GEN-END:initComponents

  private void triggerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_triggerButtonActionPerformed
    Utils.showMEMTrigger();
  }//GEN-LAST:event_triggerButtonActionPerformed

  private void captureButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_captureButtonActionPerformed
    Utils.execCommand(MainPanel.mfdbkGEpicsDevName, "MEM_CAPTURE_S");    
  }//GEN-LAST:event_captureButtonActionPerformed

  private void dismissButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dismissButtonActionPerformed
    setVisible(false);
  }//GEN-LAST:event_dismissButtonActionPerformed

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JPanel btnPanel;
  private javax.swing.JButton captureButton;
  private javax.swing.JPanel captureGroupPanel;
  private javax.swing.JPanel capturePanel;
  private fr.esrf.tangoatk.widget.attribute.SimpleEnumScalarViewer captureStatusViewer;
  private fr.esrf.tangoatk.widget.attribute.EnumScalarComboEditor channel0Editor;
  private fr.esrf.tangoatk.widget.attribute.EnumScalarComboEditor channel1Editor;
  private javax.swing.JButton dismissButton;
  private javax.swing.JPanel firPanel;
  private fr.esrf.tangoatk.widget.attribute.EnumScalarComboEditor hGainEditor;
  private javax.swing.JPanel hGainStatusPanel;
  private fr.esrf.tangoatk.widget.attribute.SimpleEnumScalarViewer hGainViewer;
  private javax.swing.JPanel jPanel1;
  private javax.swing.JPanel jPanel2;
  private fr.esrf.tangoatk.widget.util.JSmoothLabel jSmoothLabel1;
  private fr.esrf.tangoatk.widget.util.JSmoothLabel jSmoothLabel2;
  private fr.esrf.tangoatk.widget.util.JSmoothLabel jSmoothLabel3;
  private fr.esrf.tangoatk.widget.util.JSmoothLabel jSmoothLabel4;
  private fr.esrf.tangoatk.widget.util.JSmoothLabel jSmoothLabel5;
  private fr.esrf.tangoatk.widget.util.JSmoothLabel jSmoothLabel6;
  private fr.esrf.tangoatk.widget.util.JSmoothLabel jSmoothLabel7;
  private fr.esrf.tangoatk.widget.util.JSmoothLabel jSmoothLabel8;
  private fr.esrf.tangoatk.widget.util.JSmoothLabel jSmoothLabel9;
  private javax.swing.JPanel memoryPanel;
  private fr.esrf.tangoatk.widget.attribute.NumberScalarWheelEditor offsetEditor;
  private fr.esrf.tangoatk.widget.attribute.EnumScalarComboEditor runoutEditor;
  private fr.esrf.tangoatk.widget.attribute.EnumScalarComboEditor selectEditor;
  private javax.swing.JPanel selectionPanel;
  private javax.swing.JButton triggerButton;
  private fr.esrf.tangoatk.widget.attribute.EnumScalarComboEditor vGainEditor;
  private javax.swing.JPanel vGainStatusPanel;
  private fr.esrf.tangoatk.widget.attribute.SimpleEnumScalarViewer vGainViewer;
  private fr.esrf.tangoatk.widget.attribute.NumberSpectrumViewer wf0Viewer;
  private fr.esrf.tangoatk.widget.attribute.NumberSpectrumViewer wf1Viewer;
  // End of variables declaration//GEN-END:variables

  @Override
  public void enumScalarChange(EnumScalarEvent ese) {

    Object src = ese.getSource();
    
    if( src==fir0Overflow ) {
      int value = fir0Overflow.getShortValueFromEnumScalar(ese.getValue());
      if(value==0)
        vGainStatusPanel.setBackground(ATKConstant.getColor4State("ON"));
      else
        vGainStatusPanel.setBackground(ATKConstant.getColor4State("FAULT"));              
    } else if ( src==fir1Overflow ) {
      int value = fir1Overflow.getShortValueFromEnumScalar(ese.getValue());
      if(value==0)
        hGainStatusPanel.setBackground(ATKConstant.getColor4State("ON"));
      else
        hGainStatusPanel.setBackground(ATKConstant.getColor4State("FAULT"));      
    } else if ( src==captureStatus ) {
      int value = captureStatus.getShortValueFromEnumScalar(ese.getValue());
      if(value==0)
        capturePanel.setBackground(ATKConstant.getColor4State("ON"));
      else
        capturePanel.setBackground(ATKConstant.getColor4State("STANDBY"));      
    }
    
  }

  @Override
  public void stateChange(AttributeStateEvent ase) {
  }

  @Override
  public void errorChange(ErrorEvent ee) {
    Object src = ee.getSource();
    if( src==fir0Overflow ) {
      vGainStatusPanel.setBackground(ATKConstant.getColor4State("UNKNOWN"));              
    } else if ( src==fir1Overflow ) {
      hGainStatusPanel.setBackground(ATKConstant.getColor4State("UNKNOWN"));      
    } else if ( src==captureStatus ) {
      capturePanel.setBackground(ATKConstant.getColor4State("UNKNOWN"));      
    }
  }
}
