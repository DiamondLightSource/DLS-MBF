/*----- PROTECTED REGION ID(MBFControlClass.h) ENABLED START -----*/
//=============================================================================
//
// file :        MBFControlClass.h
//
// description : Include for the MBFControl root class.
//               This class is the singleton class for
//                the MBFControl device class.
//               It contains all properties and methods which the 
//               MBFControl requires only once e.g. the commands.
//
// project :     MBFControl
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
//
// Copyright (C): 2018
//                European Synchrotron Radiation Facility
//                BP 220, Grenoble 38043
//                France
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef MBFControlClass_H
#define MBFControlClass_H

#include <tango.h>
#include <MBFControl.h>


/*----- PROTECTED REGION END -----*/	//	MBFControlClass.h


namespace MBFControl_ns
{
/*----- PROTECTED REGION ID(MBFControlClass::classes for dynamic creation) ENABLED START -----*/


/*----- PROTECTED REGION END -----*/	//	MBFControlClass::classes for dynamic creation

//=========================================
//	Define classes for attributes
//=========================================
//	Attribute Mode class definition
class ModeAttrib: public Tango::Attr
{
public:
	ModeAttrib():Attr("Mode",
			Tango::DEV_ENUM, Tango::READ_WRITE) {};
	~ModeAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<MBFControl *>(dev))->read_Mode(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<MBFControl *>(dev))->write_Mode(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<MBFControl *>(dev))->is_Mode_allowed(ty);}
	virtual bool same_type(const type_info &in_type) {return typeid(ModeEnum) == in_type;}
	virtual string get_enum_type() {return string("ModeEnum");}
};

//	Attribute ConfigFileName class definition
class ConfigFileNameAttrib: public Tango::Attr
{
public:
	ConfigFileNameAttrib():Attr("ConfigFileName",
			Tango::DEV_STRING, Tango::READ) {};
	~ConfigFileNameAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<MBFControl *>(dev))->read_ConfigFileName(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<MBFControl *>(dev))->is_ConfigFileName_allowed(ty);}
};

//	Attribute Tune class definition
class TuneAttrib: public Tango::Attr
{
public:
	TuneAttrib():Attr("Tune",
			Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~TuneAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<MBFControl *>(dev))->read_Tune(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<MBFControl *>(dev))->write_Tune(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<MBFControl *>(dev))->is_Tune_allowed(ty);}
};

//	Attribute FeedbackGain class definition
class FeedbackGainAttrib: public Tango::Attr
{
public:
	FeedbackGainAttrib():Attr("FeedbackGain",
			Tango::DEV_SHORT, Tango::READ_WRITE) {};
	~FeedbackGainAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<MBFControl *>(dev))->read_FeedbackGain(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<MBFControl *>(dev))->write_FeedbackGain(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<MBFControl *>(dev))->is_FeedbackGain_allowed(ty);}
};

//	Attribute FeedbackFineGain class definition
class FeedbackFineGainAttrib: public Tango::Attr
{
public:
	FeedbackFineGainAttrib():Attr("FeedbackFineGain",
			Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~FeedbackFineGainAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<MBFControl *>(dev))->read_FeedbackFineGain(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<MBFControl *>(dev))->write_FeedbackFineGain(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<MBFControl *>(dev))->is_FeedbackFineGain_allowed(ty);}
};

//	Attribute FeedbackPhase class definition
class FeedbackPhaseAttrib: public Tango::Attr
{
public:
	FeedbackPhaseAttrib():Attr("FeedbackPhase",
			Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~FeedbackPhaseAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<MBFControl *>(dev))->read_FeedbackPhase(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<MBFControl *>(dev))->write_FeedbackPhase(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<MBFControl *>(dev))->is_FeedbackPhase_allowed(ty);}
};

//	Attribute Harmonic class definition
class HarmonicAttrib: public Tango::Attr
{
public:
	HarmonicAttrib():Attr("Harmonic",
			Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~HarmonicAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<MBFControl *>(dev))->read_Harmonic(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<MBFControl *>(dev))->write_Harmonic(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<MBFControl *>(dev))->is_Harmonic_allowed(ty);}
};

//	Attribute SweepRange class definition
class SweepRangeAttrib: public Tango::Attr
{
public:
	SweepRangeAttrib():Attr("SweepRange",
			Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~SweepRangeAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<MBFControl *>(dev))->read_SweepRange(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<MBFControl *>(dev))->write_SweepRange(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<MBFControl *>(dev))->is_SweepRange_allowed(ty);}
};

//	Attribute SweepDwellTime class definition
class SweepDwellTimeAttrib: public Tango::Attr
{
public:
	SweepDwellTimeAttrib():Attr("SweepDwellTime",
			Tango::DEV_LONG, Tango::READ_WRITE) {};
	~SweepDwellTimeAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<MBFControl *>(dev))->read_SweepDwellTime(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<MBFControl *>(dev))->write_SweepDwellTime(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<MBFControl *>(dev))->is_SweepDwellTime_allowed(ty);}
};

//	Attribute SweepGain class definition
class SweepGainAttrib: public Tango::Attr
{
public:
	SweepGainAttrib():Attr("SweepGain",
			Tango::DEV_SHORT, Tango::READ_WRITE) {};
	~SweepGainAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<MBFControl *>(dev))->read_SweepGain(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<MBFControl *>(dev))->write_SweepGain(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<MBFControl *>(dev))->is_SweepGain_allowed(ty);}
};

//	Attribute BlankingInterval class definition
class BlankingIntervalAttrib: public Tango::Attr
{
public:
	BlankingIntervalAttrib():Attr("BlankingInterval",
			Tango::DEV_LONG, Tango::READ) {};
	~BlankingIntervalAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<MBFControl *>(dev))->read_BlankingInterval(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<MBFControl *>(dev))->is_BlankingInterval_allowed(ty);}
};

//	Attribute TuneOnSingleBunch class definition
class TuneOnSingleBunchAttrib: public Tango::Attr
{
public:
	TuneOnSingleBunchAttrib():Attr("TuneOnSingleBunch",
			Tango::DEV_BOOLEAN, Tango::READ_WRITE) {};
	~TuneOnSingleBunchAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<MBFControl *>(dev))->read_TuneOnSingleBunch(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<MBFControl *>(dev))->write_TuneOnSingleBunch(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<MBFControl *>(dev))->is_TuneOnSingleBunch_allowed(ty);}
};

//	Attribute TuneBunch class definition
class TuneBunchAttrib: public Tango::Attr
{
public:
	TuneBunchAttrib():Attr("TuneBunch",
			Tango::DEV_SHORT, Tango::READ_WRITE) {};
	~TuneBunchAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<MBFControl *>(dev))->read_TuneBunch(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<MBFControl *>(dev))->write_TuneBunch(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<MBFControl *>(dev))->is_TuneBunch_allowed(ty);}
};

//	Attribute SweepState class definition
class SweepStateAttrib: public Tango::Attr
{
public:
	SweepStateAttrib():Attr("SweepState",
			Tango::DEV_STATE, Tango::READ) {};
	~SweepStateAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<MBFControl *>(dev))->read_SweepState(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<MBFControl *>(dev))->is_SweepState_allowed(ty);}
};

//	Attribute MacroHistory class definition
class MacroHistoryAttrib: public Tango::SpectrumAttr
{
public:
	MacroHistoryAttrib():SpectrumAttr("MacroHistory",
			Tango::DEV_STRING, Tango::READ, 1024) {};
	~MacroHistoryAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<MBFControl *>(dev))->read_MacroHistory(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<MBFControl *>(dev))->is_MacroHistory_allowed(ty);}
};

//	Attribute ModeList class definition
class ModeListAttrib: public Tango::SpectrumAttr
{
public:
	ModeListAttrib():SpectrumAttr("ModeList",
			Tango::DEV_STRING, Tango::READ, 32) {};
	~ModeListAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<MBFControl *>(dev))->read_ModeList(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<MBFControl *>(dev))->is_ModeList_allowed(ty);}
};


//=========================================
//	Define classes for commands
//=========================================
//	Command LoadConfigurationFile class definition
class LoadConfigurationFileClass : public Tango::Command
{
public:
	LoadConfigurationFileClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	LoadConfigurationFileClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~LoadConfigurationFileClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<MBFControl *>(dev))->is_LoadConfigurationFile_allowed(any);}
};

//	Command SaveConfigurationFile class definition
class SaveConfigurationFileClass : public Tango::Command
{
public:
	SaveConfigurationFileClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	SaveConfigurationFileClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~SaveConfigurationFileClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<MBFControl *>(dev))->is_SaveConfigurationFile_allowed(any);}
};

//	Command GetConfigurationFilePath class definition
class GetConfigurationFilePathClass : public Tango::Command
{
public:
	GetConfigurationFilePathClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	GetConfigurationFilePathClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~GetConfigurationFilePathClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<MBFControl *>(dev))->is_GetConfigurationFilePath_allowed(any);}
};

//	Command On class definition
class OnClass : public Tango::Command
{
public:
	OnClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	OnClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~OnClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<MBFControl *>(dev))->is_On_allowed(any);}
};

//	Command Off class definition
class OffClass : public Tango::Command
{
public:
	OffClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	OffClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~OffClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<MBFControl *>(dev))->is_Off_allowed(any);}
};

//	Command SweepOn class definition
class SweepOnClass : public Tango::Command
{
public:
	SweepOnClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	SweepOnClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~SweepOnClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<MBFControl *>(dev))->is_SweepOn_allowed(any);}
};

//	Command SweepOff class definition
class SweepOffClass : public Tango::Command
{
public:
	SweepOffClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	SweepOffClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~SweepOffClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<MBFControl *>(dev))->is_SweepOff_allowed(any);}
};

//	Command Clean class definition
class CleanClass : public Tango::Command
{
public:
	CleanClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	CleanClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~CleanClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<MBFControl *>(dev))->is_Clean_allowed(any);}
};

//	Command Reset class definition
class ResetClass : public Tango::Command
{
public:
	ResetClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	ResetClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~ResetClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<MBFControl *>(dev))->is_Reset_allowed(any);}
};


/**
 *	The MBFControlClass singleton definition
 */

#ifdef _TG_WINDOWS_
class __declspec(dllexport)  MBFControlClass : public Tango::DeviceClass
#else
class MBFControlClass : public Tango::DeviceClass
#endif
{
	/*----- PROTECTED REGION ID(MBFControlClass::Additionnal DServer data members) ENABLED START -----*/
	
	
	/*----- PROTECTED REGION END -----*/	//	MBFControlClass::Additionnal DServer data members

	public:
		//	write class properties data members
		Tango::DbData	cl_prop;
		Tango::DbData	cl_def_prop;
		Tango::DbData	dev_def_prop;
	
		//	Method prototypes
		static MBFControlClass *init(const char *);
		static MBFControlClass *instance();
		~MBFControlClass();
		Tango::DbDatum	get_class_property(string &);
		Tango::DbDatum	get_default_device_property(string &);
		Tango::DbDatum	get_default_class_property(string &);
	
	protected:
		MBFControlClass(string &);
		static MBFControlClass *_instance;
		void command_factory();
		void attribute_factory(vector<Tango::Attr *> &);
		void pipe_factory();
		void write_class_property();
		void set_default_property();
		void get_class_property();
		string get_cvstag();
		string get_cvsroot();
	
	private:
		void device_factory(const Tango::DevVarStringArray *);
		void create_static_attribute_list(vector<Tango::Attr *> &);
		void erase_dynamic_attributes(const Tango::DevVarStringArray *,vector<Tango::Attr *> &);
		vector<string>	defaultAttList;
		Tango::Attr *get_attr_object_by_name(vector<Tango::Attr *> &att_list, string attname);
};

}	//	End of namespace

#endif   //	MBFControl_H
