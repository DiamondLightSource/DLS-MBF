/*----- PROTECTED REGION ID(MBFControl.cpp) ENABLED START -----*/
//=============================================================================
//
// file :        MBFControl.cpp
//
// description : C++ source for the MBFControl class and its commands.
//               The class is derived from Device. It represents the
//               CORBA servant object which will be accessed from the
//               network. All commands which can be executed on the
//               MBFControl are implemented in this file.
//
// project :     MBFControl
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
//
// Copyright (C): 2018
//                European Synchrotron Radiation Facility
//                BP 220, Grenoble 38043
//                France
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#include <MBFControl.h>
#include <MBFControlClass.h>


#define RAISE_EXCEPTION(cmd) Tango::Except::throw_exception(\
  (const char *)"MBFControl::config_error",\
  (const char *)cmd,\
  (const char *)"MBFControl::[load][save]_config");

#define ARB_MODE (modeList.size()-1)

/*----- PROTECTED REGION END -----*/	//	MBFControl.cpp

/**
 *  MBFControl class description:
 *    A high level class to control MBF startup, configuration sequence and configuration file
 */

//================================================================
//  The following table gives the correspondence
//  between command and method names.
//
//  Command name              |  Method name
//================================================================
//  State                     |  dev_state
//  Status                    |  Inherited (no method)
//  LoadConfigurationFile     |  load_configuration_file
//  SaveConfigurationFile     |  save_configuration_file
//  GetConfigurationFilePath  |  get_configuration_file_path
//  On                        |  on
//  Off                       |  off
//  SweepOn                   |  sweep_on
//  SweepOff                  |  sweep_off
//  Clean                     |  clean
//  Reset                     |  reset
//  ReLoad                    |  re_load
//================================================================

//================================================================
//  Attributes managed are:
//================================================================
//  Mode                  |  Tango::DevEnum	Scalar
//  ConfigFileName        |  Tango::DevString	Scalar
//  Tune                  |  Tango::DevDouble	Scalar
//  FeedbackGain          |  Tango::DevShort	Scalar
//  FeedbackFineGain      |  Tango::DevDouble	Scalar
//  FeedbackPhase         |  Tango::DevDouble	Scalar
//  Harmonic              |  Tango::DevDouble	Scalar
//  SweepRange            |  Tango::DevDouble	Scalar
//  SweepDwellTime        |  Tango::DevLong	Scalar
//  SweepGainSingleBunch  |  Tango::DevShort	Scalar
//  SweepGainAllBunches   |  Tango::DevShort	Scalar
//  BlankingInterval      |  Tango::DevLong	Scalar
//  TuneOnSingleBunch     |  Tango::DevBoolean	Scalar
//  TuneBunch             |  Tango::DevShort	Scalar
//  SweepState            |  Tango::DevState	Scalar
//  MacroHistory          |  Tango::DevString	Spectrum  ( max = 1024)
//  ModeList              |  Tango::DevString	Spectrum  ( max = 32)
//  CleaningPattern       |  Tango::DevShort	Spectrum  ( max = 1024)
//================================================================

namespace MBFControl_ns
{
/*----- PROTECTED REGION ID(MBFControl::namespace_starting) ENABLED START -----*/

//	static initializations

/*----- PROTECTED REGION END -----*/	//	MBFControl::namespace_starting

//--------------------------------------------------------
/**
 *	Method      : MBFControl::MBFControl()
 *	Description : Constructors for a Tango device
 *                implementing the classMBFControl
 */
//--------------------------------------------------------
MBFControl::MBFControl(Tango::DeviceClass *cl, string &s)
 : TANGO_BASE_CLASS(cl, s.c_str())
{
	/*----- PROTECTED REGION ID(MBFControl::constructor_1) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	MBFControl::constructor_1
}
//--------------------------------------------------------
MBFControl::MBFControl(Tango::DeviceClass *cl, const char *s)
 : TANGO_BASE_CLASS(cl, s)
{
	/*----- PROTECTED REGION ID(MBFControl::constructor_2) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	MBFControl::constructor_2
}
//--------------------------------------------------------
MBFControl::MBFControl(Tango::DeviceClass *cl, const char *s, const char *d)
 : TANGO_BASE_CLASS(cl, s, d)
{
	/*----- PROTECTED REGION ID(MBFControl::constructor_3) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	MBFControl::constructor_3
}

//--------------------------------------------------------
/**
 *	Method      : MBFControl::delete_device()
 *	Description : will be called at device destruction or at init command
 */
//--------------------------------------------------------
void MBFControl::delete_device()
{
	DEBUG_STREAM << "MBFControl::delete_device() " << device_name << endl;
	/*----- PROTECTED REGION ID(MBFControl::delete_device) ENABLED START -----*/
	
	//	Delete device allocated objects
	
	/*----- PROTECTED REGION END -----*/	//	MBFControl::delete_device
	delete[] attr_Mode_read;
	delete[] attr_ConfigFileName_read;
	delete[] attr_Tune_read;
	delete[] attr_FeedbackGain_read;
	delete[] attr_FeedbackFineGain_read;
	delete[] attr_FeedbackPhase_read;
	delete[] attr_Harmonic_read;
	delete[] attr_SweepRange_read;
	delete[] attr_SweepDwellTime_read;
	delete[] attr_SweepGainSingleBunch_read;
	delete[] attr_SweepGainAllBunches_read;
	delete[] attr_BlankingInterval_read;
	delete[] attr_TuneOnSingleBunch_read;
	delete[] attr_TuneBunch_read;
	delete[] attr_SweepState_read;
	delete[] attr_CleaningPattern_read;
}

//--------------------------------------------------------
/**
 *	Method      : MBFControl::init_device()
 *	Description : will be called at device initialization.
 */
//--------------------------------------------------------
void MBFControl::init_device()
{
	DEBUG_STREAM << "MBFControl::init_device() create device " << device_name << endl;
	/*----- PROTECTED REGION ID(MBFControl::init_device_before) ENABLED START -----*/
	
	//	Initialization before get_device_property() call
	
	/*----- PROTECTED REGION END -----*/	//	MBFControl::init_device_before
	

	//	Get the device properties from database
	get_device_property();
	
	attr_Mode_read = new ModeEnum[1];
	attr_ConfigFileName_read = new Tango::DevString[1];
	attr_Tune_read = new Tango::DevDouble[1];
	attr_FeedbackGain_read = new Tango::DevShort[1];
	attr_FeedbackFineGain_read = new Tango::DevDouble[1];
	attr_FeedbackPhase_read = new Tango::DevDouble[1];
	attr_Harmonic_read = new Tango::DevDouble[1];
	attr_SweepRange_read = new Tango::DevDouble[1];
	attr_SweepDwellTime_read = new Tango::DevLong[1];
	attr_SweepGainSingleBunch_read = new Tango::DevShort[1];
	attr_SweepGainAllBunches_read = new Tango::DevShort[1];
	attr_BlankingInterval_read = new Tango::DevLong[1];
	attr_TuneOnSingleBunch_read = new Tango::DevBoolean[1];
	attr_TuneBunch_read = new Tango::DevShort[1];
	attr_SweepState_read = new Tango::DevState[1];
	attr_CleaningPattern_read = new Tango::DevShort[1024];
	/*----- PROTECTED REGION ID(MBFControl::init_device) ENABLED START -----*/
	
	//	Initialize device
  if( mBFDevice.length()==0 ) {
    cerr << "MBFDevice device property not defined" << endl;
    exit(0);
  }
  if( doorDevice.length()==0 ) {
    cerr << "DoorDevice device property not defined" << endl;
    exit(0);
  }
  if( gMBFDevice.length()==0 ) {
    cerr << "GMBFDevice device property not defined" << endl;
    exit(0);
  }

  mbfDS    = new Tango::DeviceProxy(mBFDevice);
  doorDS   = new Tango::DeviceProxy(doorDevice);
  gmbfDS   = new Tango::DeviceProxy(gMBFDevice);
	macroName = "";
  configFile = "No file";
  configLoadingFailed = false;
  attr_BlankingInterval_read[0]=-1;
	pattern_length = 0;

	// Set labels for modes
	if( modeList.size()==0 ) {
	  cerr << "Warning no mode defined, use ModeList property to define mode(s)" << endl;
	}

  modeList.push_back("ARB_Pattern");
	string attName = "Mode";
	Tango::Attribute &modeAtt = get_device_attr()->get_attr_by_name(attName.c_str());
	Tango::MultiAttrProp<Tango::DevEnum> modeProps;
	modeAtt.get_properties(modeProps);
	modeProps.enum_labels = modeList;
	modeAtt.set_properties(modeProps);

	/*----- PROTECTED REGION END -----*/	//	MBFControl::init_device
}

//--------------------------------------------------------
/**
 *	Method      : MBFControl::get_device_property()
 *	Description : Read database to initialize property data members.
 */
//--------------------------------------------------------
void MBFControl::get_device_property()
{
	/*----- PROTECTED REGION ID(MBFControl::get_device_property_before) ENABLED START -----*/
	
	//	Initialize property data members
  mBFDevice = "";
  gMBFDevice = "";
  doorDevice = "";
	
	/*----- PROTECTED REGION END -----*/	//	MBFControl::get_device_property_before


	//	Read device properties from database.
	Tango::DbData	dev_prop;
	dev_prop.push_back(Tango::DbDatum("ConfigFilePath"));
	dev_prop.push_back(Tango::DbDatum("MBFDevice"));
	dev_prop.push_back(Tango::DbDatum("DoorDevice"));
	dev_prop.push_back(Tango::DbDatum("ModeList"));
	dev_prop.push_back(Tango::DbDatum("GMBFDevice"));

	//	is there at least one property to be read ?
	if (dev_prop.size()>0)
	{
		//	Call database and extract values
		if (Tango::Util::instance()->_UseDb==true)
			get_db_device()->get_property(dev_prop);
	
		//	get instance on MBFControlClass to get class property
		Tango::DbDatum	def_prop, cl_prop;
		MBFControlClass	*ds_class =
			(static_cast<MBFControlClass *>(get_device_class()));
		int	i = -1;

		//	Try to initialize ConfigFilePath from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  configFilePath;
		else {
			//	Try to initialize ConfigFilePath from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  configFilePath;
		}
		//	And try to extract ConfigFilePath value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  configFilePath;

		//	Try to initialize MBFDevice from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  mBFDevice;
		else {
			//	Try to initialize MBFDevice from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  mBFDevice;
		}
		//	And try to extract MBFDevice value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  mBFDevice;

		//	Try to initialize DoorDevice from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  doorDevice;
		else {
			//	Try to initialize DoorDevice from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  doorDevice;
		}
		//	And try to extract DoorDevice value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  doorDevice;

		//	Try to initialize ModeList from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  modeList;
		else {
			//	Try to initialize ModeList from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  modeList;
		}
		//	And try to extract ModeList value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  modeList;

		//	Try to initialize GMBFDevice from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  gMBFDevice;
		else {
			//	Try to initialize GMBFDevice from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  gMBFDevice;
		}
		//	And try to extract GMBFDevice value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  gMBFDevice;

	}

	/*----- PROTECTED REGION ID(MBFControl::get_device_property_after) ENABLED START -----*/
	
	//	Check device property data members init
	
	/*----- PROTECTED REGION END -----*/	//	MBFControl::get_device_property_after
}

//--------------------------------------------------------
/**
 *	Method      : MBFControl::always_executed_hook()
 *	Description : method always executed before any command is executed
 */
//--------------------------------------------------------
void MBFControl::always_executed_hook()
{
	DEBUG_STREAM << "MBFControl::always_executed_hook()  " << device_name << endl;
	/*----- PROTECTED REGION ID(MBFControl::always_executed_hook) ENABLED START -----*/
	
	//	code always executed before all requests
	
	/*----- PROTECTED REGION END -----*/	//	MBFControl::always_executed_hook
}

//--------------------------------------------------------
/**
 *	Method      : MBFControl::read_attr_hardware()
 *	Description : Hardware acquisition for attributes
 */
//--------------------------------------------------------
void MBFControl::read_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
	DEBUG_STREAM << "MBFControl::read_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(MBFControl::read_attr_hardware) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	MBFControl::read_attr_hardware
}
//--------------------------------------------------------
/**
 *	Method      : MBFControl::write_attr_hardware()
 *	Description : Hardware writing for attributes
 */
//--------------------------------------------------------
void MBFControl::write_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
	DEBUG_STREAM << "MBFControl::write_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(MBFControl::write_attr_hardware) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	MBFControl::write_attr_hardware
}

//--------------------------------------------------------
/**
 *	Read attribute Mode related method
 *	Description: 
 *
 *	Data type:	Tango::DevEnum (ModeEnum)
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void MBFControl::read_Mode(Tango::Attribute &attr)
{
	DEBUG_STREAM << "MBFControl::read_Mode(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(MBFControl::read_Mode) ENABLED START -----*/

	attr.set_value(attr_Mode_read);
	
	/*----- PROTECTED REGION END -----*/	//	MBFControl::read_Mode
}
//--------------------------------------------------------
/**
 *	Write attribute Mode related method
 *	Description: 
 *
 *	Data type:	Tango::DevEnum (ModeEnum)
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void MBFControl::write_Mode(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "MBFControl::write_Mode(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	ModeEnum	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(MBFControl::write_Mode) ENABLED START -----*/

	attr_Mode_read[0] = w_val;
  if( !is_srv_starting() )
    run_macro("set_param", "Mode");
	
	/*----- PROTECTED REGION END -----*/	//	MBFControl::write_Mode
}
//--------------------------------------------------------
/**
 *	Read attribute ConfigFileName related method
 *	Description: 
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void MBFControl::read_ConfigFileName(Tango::Attribute &attr)
{
	DEBUG_STREAM << "MBFControl::read_ConfigFileName(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(MBFControl::read_ConfigFileName) ENABLED START -----*/

  attr_ConfigFileName_read[0] = (char *)configFile.c_str();
  if( configLoadingFailed ) {
    attr.set_quality(Tango::ATTR_ALARM);
  } else {
    attr.set_quality(Tango::ATTR_VALID);
  }
	attr.set_value(attr_ConfigFileName_read);
	
	/*----- PROTECTED REGION END -----*/	//	MBFControl::read_ConfigFileName
}
//--------------------------------------------------------
/**
 *	Read attribute Tune related method
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void MBFControl::read_Tune(Tango::Attribute &attr)
{
	DEBUG_STREAM << "MBFControl::read_Tune(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(MBFControl::read_Tune) ENABLED START -----*/

	attr.set_value(attr_Tune_read);

	/*----- PROTECTED REGION END -----*/	//	MBFControl::read_Tune
}
//--------------------------------------------------------
/**
 *	Write attribute Tune related method
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void MBFControl::write_Tune(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "MBFControl::write_Tune(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(MBFControl::write_Tune) ENABLED START -----*/

  attr_Tune_read[0] = w_val;
  if( !is_srv_starting() )
    run_macro("set_param","Tune");

	/*----- PROTECTED REGION END -----*/	//	MBFControl::write_Tune
}
//--------------------------------------------------------
/**
 *	Read attribute FeedbackGain related method
 *	Description: 
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void MBFControl::read_FeedbackGain(Tango::Attribute &attr)
{
	DEBUG_STREAM << "MBFControl::read_FeedbackGain(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(MBFControl::read_FeedbackGain) ENABLED START -----*/

	attr.set_value(attr_FeedbackGain_read);
	
	/*----- PROTECTED REGION END -----*/	//	MBFControl::read_FeedbackGain
}
//--------------------------------------------------------
/**
 *	Write attribute FeedbackGain related method
 *	Description: 
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void MBFControl::write_FeedbackGain(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "MBFControl::write_FeedbackGain(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevShort	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(MBFControl::write_FeedbackGain) ENABLED START -----*/

  attr_FeedbackGain_read[0] = w_val;
  if( !is_srv_starting() )
    run_macro("set_param","FeedbackGain");

	/*----- PROTECTED REGION END -----*/	//	MBFControl::write_FeedbackGain
}
//--------------------------------------------------------
/**
 *	Read attribute FeedbackFineGain related method
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void MBFControl::read_FeedbackFineGain(Tango::Attribute &attr)
{
	DEBUG_STREAM << "MBFControl::read_FeedbackFineGain(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(MBFControl::read_FeedbackFineGain) ENABLED START -----*/

	attr.set_value(attr_FeedbackFineGain_read);
	
	/*----- PROTECTED REGION END -----*/	//	MBFControl::read_FeedbackFineGain
}
//--------------------------------------------------------
/**
 *	Write attribute FeedbackFineGain related method
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void MBFControl::write_FeedbackFineGain(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "MBFControl::write_FeedbackFineGain(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(MBFControl::write_FeedbackFineGain) ENABLED START -----*/

  attr_FeedbackFineGain_read[0] = w_val;
  if( !is_srv_starting() )
    run_macro("set_param","FeedbackFineGain");

	/*----- PROTECTED REGION END -----*/	//	MBFControl::write_FeedbackFineGain
}
//--------------------------------------------------------
/**
 *	Read attribute FeedbackPhase related method
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void MBFControl::read_FeedbackPhase(Tango::Attribute &attr)
{
	DEBUG_STREAM << "MBFControl::read_FeedbackPhase(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(MBFControl::read_FeedbackPhase) ENABLED START -----*/

	attr.set_value(attr_FeedbackPhase_read);

	/*----- PROTECTED REGION END -----*/	//	MBFControl::read_FeedbackPhase
}
//--------------------------------------------------------
/**
 *	Write attribute FeedbackPhase related method
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void MBFControl::write_FeedbackPhase(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "MBFControl::write_FeedbackPhase(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(MBFControl::write_FeedbackPhase) ENABLED START -----*/

  attr_FeedbackPhase_read[0] = w_val;
  if( !is_srv_starting() )
    run_macro("set_param","FeedbackPhase");

  /*----- PROTECTED REGION END -----*/	//	MBFControl::write_FeedbackPhase
}
//--------------------------------------------------------
/**
 *	Read attribute Harmonic related method
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void MBFControl::read_Harmonic(Tango::Attribute &attr)
{
	DEBUG_STREAM << "MBFControl::read_Harmonic(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(MBFControl::read_Harmonic) ENABLED START -----*/

	attr.set_value(attr_Harmonic_read);
	
	/*----- PROTECTED REGION END -----*/	//	MBFControl::read_Harmonic
}
//--------------------------------------------------------
/**
 *	Write attribute Harmonic related method
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void MBFControl::write_Harmonic(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "MBFControl::write_Harmonic(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(MBFControl::write_Harmonic) ENABLED START -----*/

  attr_Harmonic_read[0] = w_val;
  if( !is_srv_starting() )
    run_macro("set_param","Harmonic");

	/*----- PROTECTED REGION END -----*/	//	MBFControl::write_Harmonic
}
//--------------------------------------------------------
/**
 *	Read attribute SweepRange related method
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void MBFControl::read_SweepRange(Tango::Attribute &attr)
{
	DEBUG_STREAM << "MBFControl::read_SweepRange(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(MBFControl::read_SweepRange) ENABLED START -----*/

	attr.set_value(attr_SweepRange_read);
	
	/*----- PROTECTED REGION END -----*/	//	MBFControl::read_SweepRange
}
//--------------------------------------------------------
/**
 *	Write attribute SweepRange related method
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void MBFControl::write_SweepRange(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "MBFControl::write_SweepRange(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(MBFControl::write_SweepRange) ENABLED START -----*/

  attr_SweepRange_read[0] = w_val;
  if( !is_srv_starting() )
    run_macro("set_param","SweepRange");

	/*----- PROTECTED REGION END -----*/	//	MBFControl::write_SweepRange
}
//--------------------------------------------------------
/**
 *	Read attribute SweepDwellTime related method
 *	Description: 
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void MBFControl::read_SweepDwellTime(Tango::Attribute &attr)
{
	DEBUG_STREAM << "MBFControl::read_SweepDwellTime(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(MBFControl::read_SweepDwellTime) ENABLED START -----*/

	attr.set_value(attr_SweepDwellTime_read);
	
	/*----- PROTECTED REGION END -----*/	//	MBFControl::read_SweepDwellTime
}
//--------------------------------------------------------
/**
 *	Write attribute SweepDwellTime related method
 *	Description: 
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void MBFControl::write_SweepDwellTime(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "MBFControl::write_SweepDwellTime(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevLong	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(MBFControl::write_SweepDwellTime) ENABLED START -----*/

  attr_SweepDwellTime_read[0] = w_val;
  if( !is_srv_starting() )
    run_macro("set_param","SweepDwellTime");
	
	/*----- PROTECTED REGION END -----*/	//	MBFControl::write_SweepDwellTime
}
//--------------------------------------------------------
/**
 *	Read attribute SweepGainSingleBunch related method
 *	Description: 
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void MBFControl::read_SweepGainSingleBunch(Tango::Attribute &attr)
{
	DEBUG_STREAM << "MBFControl::read_SweepGainSingleBunch(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(MBFControl::read_SweepGainSingleBunch) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_SweepGainSingleBunch_read);
	
	/*----- PROTECTED REGION END -----*/	//	MBFControl::read_SweepGainSingleBunch
}
//--------------------------------------------------------
/**
 *	Write attribute SweepGainSingleBunch related method
 *	Description: 
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void MBFControl::write_SweepGainSingleBunch(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "MBFControl::write_SweepGainSingleBunch(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevShort	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(MBFControl::write_SweepGainSingleBunch) ENABLED START -----*/

	attr_SweepGainSingleBunch_read[0] = w_val;
	if( !is_srv_starting() )
		run_macro("set_param","SweepGainSingleBunch");

	/*----- PROTECTED REGION END -----*/	//	MBFControl::write_SweepGainSingleBunch
}
//--------------------------------------------------------
/**
 *	Read attribute SweepGainAllBunches related method
 *	Description: 
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void MBFControl::read_SweepGainAllBunches(Tango::Attribute &attr)
{
	DEBUG_STREAM << "MBFControl::read_SweepGainAllBunches(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(MBFControl::read_SweepGainAllBunches) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_SweepGainAllBunches_read);
	
	/*----- PROTECTED REGION END -----*/	//	MBFControl::read_SweepGainAllBunches
}
//--------------------------------------------------------
/**
 *	Write attribute SweepGainAllBunches related method
 *	Description: 
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void MBFControl::write_SweepGainAllBunches(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "MBFControl::write_SweepGainAllBunches(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevShort	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(MBFControl::write_SweepGainAllBunches) ENABLED START -----*/

	attr_SweepGainAllBunches_read[0] = w_val;
	if( !is_srv_starting() )
		run_macro("set_param","SweepGainAllBunches");

	/*----- PROTECTED REGION END -----*/	//	MBFControl::write_SweepGainAllBunches
}
//--------------------------------------------------------
/**
 *	Read attribute BlankingInterval related method
 *	Description: 
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void MBFControl::read_BlankingInterval(Tango::Attribute &attr)
{
	DEBUG_STREAM << "MBFControl::read_BlankingInterval(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(MBFControl::read_BlankingInterval) ENABLED START -----*/

	attr.set_value(attr_BlankingInterval_read);
	
	/*----- PROTECTED REGION END -----*/	//	MBFControl::read_BlankingInterval
}
//--------------------------------------------------------
/**
 *	Read attribute TuneOnSingleBunch related method
 *	Description: 
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void MBFControl::read_TuneOnSingleBunch(Tango::Attribute &attr)
{
	DEBUG_STREAM << "MBFControl::read_TuneOnSingleBunch(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(MBFControl::read_TuneOnSingleBunch) ENABLED START -----*/

	attr.set_value(attr_TuneOnSingleBunch_read);
	
	/*----- PROTECTED REGION END -----*/	//	MBFControl::read_TuneOnSingleBunch
}
//--------------------------------------------------------
/**
 *	Write attribute TuneOnSingleBunch related method
 *	Description: 
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void MBFControl::write_TuneOnSingleBunch(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "MBFControl::write_TuneOnSingleBunch(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevBoolean	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(MBFControl::write_TuneOnSingleBunch) ENABLED START -----*/

  attr_TuneOnSingleBunch_read[0] = w_val;
  if( !is_srv_starting() )
    run_macro("set_param","TuneOnSingleBunch");
	
	/*----- PROTECTED REGION END -----*/	//	MBFControl::write_TuneOnSingleBunch
}
//--------------------------------------------------------
/**
 *	Read attribute TuneBunch related method
 *	Description: 
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void MBFControl::read_TuneBunch(Tango::Attribute &attr)
{
	DEBUG_STREAM << "MBFControl::read_TuneBunch(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(MBFControl::read_TuneBunch) ENABLED START -----*/

	attr.set_value(attr_TuneBunch_read);
	
	/*----- PROTECTED REGION END -----*/	//	MBFControl::read_TuneBunch
}
//--------------------------------------------------------
/**
 *	Write attribute TuneBunch related method
 *	Description: 
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void MBFControl::write_TuneBunch(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "MBFControl::write_TuneBunch(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevShort	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(MBFControl::write_TuneBunch) ENABLED START -----*/

  attr_TuneBunch_read[0] = w_val;
  if( !is_srv_starting() )
    run_macro("set_param","TuneBunch");

  /*----- PROTECTED REGION END -----*/	//	MBFControl::write_TuneBunch
}
//--------------------------------------------------------
/**
 *	Read attribute SweepState related method
 *	Description: 
 *
 *	Data type:	Tango::DevState
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void MBFControl::read_SweepState(Tango::Attribute &attr)
{
	DEBUG_STREAM << "MBFControl::read_SweepState(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(MBFControl::read_SweepState) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_SweepState_read);
	
	/*----- PROTECTED REGION END -----*/	//	MBFControl::read_SweepState
}
//--------------------------------------------------------
/**
 *	Read attribute MacroHistory related method
 *	Description: 
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Spectrum max = 1024
 */
//--------------------------------------------------------
void MBFControl::read_MacroHistory(Tango::Attribute &attr)
{
	DEBUG_STREAM << "MBFControl::read_MacroHistory(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(MBFControl::read_MacroHistory) ENABLED START -----*/

	vector<string> history = read_macro_history();

	if (history.size() > 0)	{
		attr.set_value(make_string_array(history), history.size(), 0, true);
	}	else {
		attr.set_quality(Tango::ATTR_INVALID);
	}

	/*----- PROTECTED REGION END -----*/	//	MBFControl::read_MacroHistory
}
//--------------------------------------------------------
/**
 *	Read attribute ModeList related method
 *	Description: 
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Spectrum max = 32
 */
//--------------------------------------------------------
void MBFControl::read_ModeList(Tango::Attribute &attr)
{
	DEBUG_STREAM << "MBFControl::read_ModeList(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(MBFControl::read_ModeList) ENABLED START -----*/

  attr.set_value(make_string_array(modeList), modeList.size(), 0, true);

	/*----- PROTECTED REGION END -----*/	//	MBFControl::read_ModeList
}
//--------------------------------------------------------
/**
 *	Read attribute CleaningPattern related method
 *	Description: 
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Spectrum max = 1024
 */
//--------------------------------------------------------
void MBFControl::read_CleaningPattern(Tango::Attribute &attr)
{
	DEBUG_STREAM << "MBFControl::read_CleaningPattern(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(MBFControl::read_CleaningPattern) ENABLED START -----*/

	attr.set_value(attr_CleaningPattern_read, pattern_length);
	
	/*----- PROTECTED REGION END -----*/	//	MBFControl::read_CleaningPattern
}
//--------------------------------------------------------
/**
 *	Write attribute CleaningPattern related method
 *	Description: 
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Spectrum max = 1024
 */
//--------------------------------------------------------
void MBFControl::write_CleaningPattern(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "MBFControl::write_CleaningPattern(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve number of write values
	int	w_length = attr.get_write_value_length();

	//	Retrieve pointer on write values (Do not delete !)
	const Tango::DevShort	*w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(MBFControl::write_CleaningPattern) ENABLED START -----*/

	pattern_length = w_length;
	for(int i=0;i<w_length;i++) attr_CleaningPattern_read[i] = w_val[i];
  if( !is_srv_starting() )
    run_macro("set_param","CleaningPattern");

	/*----- PROTECTED REGION END -----*/	//	MBFControl::write_CleaningPattern
}

//--------------------------------------------------------
/**
 *	Method      : MBFControl::add_dynamic_attributes()
 *	Description : Create the dynamic attributes if any
 *                for specified device.
 */
//--------------------------------------------------------
void MBFControl::add_dynamic_attributes()
{
	/*----- PROTECTED REGION ID(MBFControl::add_dynamic_attributes) ENABLED START -----*/
	
	//	Add your own code to create and add dynamic attributes if any
	
	/*----- PROTECTED REGION END -----*/	//	MBFControl::add_dynamic_attributes
}

//--------------------------------------------------------
/**
 *	Command State related method
 *	Description: This command gets the device state (stored in its device_state data member) and returns it to the caller.
 *
 *	@returns Device state
 */
//--------------------------------------------------------
Tango::DevState MBFControl::dev_state()
{
	DEBUG_STREAM << "MBFControl::State()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(MBFControl::dev_state) ENABLED START -----*/
	
	Tango::DevState	argout = Tango::UNKNOWN;
  string status = "";

	try {

    // Compute MBF state
    Tango::DevUShort s0,s1;
    mbfDS->read_attribute("SEQ_0_BANK_S") >> s0;
    mbfDS->read_attribute("SEQ_1_BANK_S") >> s1;

    if( s0==3 && s1==2 ) {
      argout = Tango::ON;
      status = "Feedbak: On\n";
    } else {
      argout = Tango::OFF;
      status = "Feedbak: Off\n";
    }

    // Compute Sweep state
    Tango::DevUShort s1ena;
    mbfDS->read_attribute("SEQ_1_ENABLE_S") >> s1ena;

    if( s1ena ) {
			attr_SweepState_read[0] = Tango::ON;
      status += "Sweep: On\n";
    } else {
			attr_SweepState_read[0] = Tango::OFF;
      status += "Sweep: Off\n";
    }

    // Read Blanking window
    Tango::DeviceAttribute da = gmbfDS->read_attribute("TRG_BLANKING_S");
    Tango::DevLong newBlanking;
    da >> newBlanking;

    if( attr_BlankingInterval_read[0]==-1 )
      attr_BlankingInterval_read[0] = newBlanking;

    if( attr_BlankingInterval_read[0]!=newBlanking ) {
      // Blanking has changed, we need to call set_param
      attr_BlankingInterval_read[0] = newBlanking;
      run_macro("set_param","BlankingInterval");
    }

    // Add sequencer status
		Tango::DevState door_state = Tango::UNKNOWN;

		Tango::DeviceAttribute attr_data;
		attr_data = doorDS->read_attribute("State");
		attr_data >> door_state;

		attr_data = doorDS->read_attribute("Error");
		vector<string> errors;
		try {
			attr_data >> errors;
		} catch (Tango::DevFailed &e) {
		}

		if(errors.size()>0) {

			// Macro error
			argout = Tango::DISABLE;
			status += "Macro Error: " + macroName;

		} else {

			switch (door_state) {

				case Tango::ON:
					status += "Ready to execute macro";
					break;

				case Tango::RUNNING:
					argout = Tango::MOVING;
					status += "Executing macro: " + macroName;
					break;

				case Tango::ALARM:
					argout = Tango::DISABLE;
					status += "Macro aborted: " + macroName;
					break;

				case Tango::STANDBY:
					status += "Macro paused: " + macroName;
					break;

				default:
					status += "Unexpected macro state: " + string(Tango::DevStateName[door_state]);
					break;
			}

		}

	}	catch (const Tango::DevFailed &e)	{

    argout = Tango::UNKNOWN;
		status += "Communication error\n" + string(e.errors[0].desc.in());

	}

  set_status(status);
	
	/*----- PROTECTED REGION END -----*/	//	MBFControl::dev_state
	set_state(argout);    // Give the state to Tango.
	if (argout!=Tango::ALARM)
		Tango::DeviceImpl::dev_state();
	return get_state();  // Return it after Tango management.
}
//--------------------------------------------------------
/**
 *	Command LoadConfigurationFile related method
 *	Description: Loads a configuration file
 *
 *	@param argin Configuration file name (without the path)
 */
//--------------------------------------------------------
void MBFControl::load_configuration_file(Tango::DevString argin)
{
	DEBUG_STREAM << "MBFControl::LoadConfigurationFile()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(MBFControl::load_configuration_file) ENABLED START -----*/

  if( get_state()==Tango::MOVING )
    RAISE_EXCEPTION("Cannot read config file while moving.");


  Tango::DevBoolean bValue;
  Tango::DevShort sValue;
  Tango::DevLong lValue;
  Tango::DevDouble dValue;
  string strValue;


  char absolute_name[512];
  strcpy(absolute_name, configFilePath.c_str());
  strcat(absolute_name, "/");
  strcat(absolute_name, argin);
  ifstream conf(absolute_name, ios::in);
  if (conf.is_open()) {

    char buffer[512];
    int line_number = 0;
    int end = 0;

    // Check header
    strcpy(buffer,"");
    conf.getline(buffer, 512);
    if( strcmp(buffer,"## Multibunch Feedback  CONFIG  FILE ##")!=0 ) {
      conf.close();
      configLoadingFailed = true;
      RAISE_EXCEPTION("Not a Feedback config file");
    }

    while(!end) {

      // Read a line from file.
      stringstream ss;
      conf.getline(buffer, 512);
      line_number++;
      string rd = string(buffer);
      string att_name;

      if( rd.length()==0 ) {
        // End of file readched
        end = 1;
        continue;
      }

      // Jump comments
      if( rd[0]=='#' )
        continue;

      ss << rd;
      ss >> att_name;

      if(att_name=="BlankingInterval") {
        ss >> lValue;
        Tango::DeviceAttribute da("TRG_BLANKING_S",lValue);
        gmbfDS->write_attribute(da);
        attr_BlankingInterval_read[0] = lValue;
      } else if (att_name=="FeedbackFineGain") {
        ss >> dValue;
        Tango::WAttribute &att = dev_attr->get_w_attr_by_name("FeedbackFineGain");
        att.set_write_value(dValue);
        attr_FeedbackFineGain_read[0] = dValue;
      } else if (att_name=="FeedbackGain") {
        ss >> sValue;
        Tango::WAttribute &att = dev_attr->get_w_attr_by_name("FeedbackGain");
        att.set_write_value(sValue);
        attr_FeedbackGain_read[0] = sValue;
      } else if (att_name=="FeedbackPhase") {
        ss >> dValue;
        Tango::WAttribute &att = dev_attr->get_w_attr_by_name("FeedbackPhase");
        att.set_write_value(dValue);
        attr_FeedbackPhase_read[0] = dValue;
      } else if (att_name=="Harmonic") {
        ss >> dValue;
        Tango::WAttribute &att = dev_attr->get_w_attr_by_name("Harmonic");
        att.set_write_value(dValue);
        attr_Harmonic_read[0] = dValue;
      } else if (att_name=="Mode") {
        ss >> strValue;
        sValue = find_mode(strValue);
        if(sValue==-1) {
          configLoadingFailed = true;
          RAISE_EXCEPTION("Unexpected mode value");
        }
        Tango::WAttribute &att = dev_attr->get_w_attr_by_name("Mode");
        att.set_write_value(sValue);
        attr_Mode_read[0] = (ModeEnum)sValue;
      } else if (att_name=="SweepDwellTime") {
        ss >> lValue;
        Tango::WAttribute &att = dev_attr->get_w_attr_by_name("SweepDwellTime");
        att.set_write_value(lValue);
        attr_SweepDwellTime_read[0] = lValue;
      } else if (att_name=="SweepGainSingleBunch") {
        ss >> sValue;
        Tango::WAttribute &att = dev_attr->get_w_attr_by_name("SweepGainSingleBunch");
        att.set_write_value(sValue);
        attr_SweepGainSingleBunch_read[0] = sValue;
      } else if (att_name=="SweepGainAllBunches") {
				ss >> sValue;
				Tango::WAttribute &att = dev_attr->get_w_attr_by_name("SweepGainAllBunches");
				att.set_write_value(sValue);
				attr_SweepGainAllBunches_read[0] = sValue;
			} else if (att_name=="SweepRange") {
        ss >> dValue;
        Tango::WAttribute &att = dev_attr->get_w_attr_by_name("SweepRange");
        att.set_write_value(dValue);
        attr_SweepRange_read[0] = dValue;
      } else if (att_name=="Tune") {
        ss >> dValue;
        Tango::WAttribute &att = dev_attr->get_w_attr_by_name("Tune");
        att.set_write_value(dValue);
        attr_Tune_read[0] = dValue;
      } else if (att_name=="TuneBunch") {
        ss >> sValue;
        Tango::WAttribute &att = dev_attr->get_w_attr_by_name("TuneBunch");
        att.set_write_value(sValue);
        attr_TuneBunch_read[0] = sValue;
      } else if (att_name=="TuneOnSingleBunch") {
        ss >> bValue;
        Tango::WAttribute &att = dev_attr->get_w_attr_by_name("TuneOnSingleBunch");
        att.set_write_value(bValue);
        attr_TuneOnSingleBunch_read[0] = bValue;
      } else if (att_name=="CleaningPattern") {
      	ss >> strValue;
      	vector<string> values;
      	vector<short> setValues;
      	split(values,strValue,',');
      	pattern_length = values.size();
      	for(int i=0;i<pattern_length;i++) {
      		short s = (short)atoi(values[i].c_str());
					attr_CleaningPattern_read[i] = s;
					setValues.push_back(s);
				}
				Tango::WAttribute &att = dev_attr->get_w_attr_by_name("CleaningPattern");
				att.set_write_value(setValues,setValues.size());
      }

    }

    conf.close();
    configFile = string(argin);
    configLoadingFailed = false;

  } else {
    // Unable to open file.
    char tmp[1024];
    sprintf(tmp,"Unable to open file for reading %s",absolute_name);
    configLoadingFailed = true;
    RAISE_EXCEPTION(tmp);
  }

  run_macro("set_param","All");
	
	/*----- PROTECTED REGION END -----*/	//	MBFControl::load_configuration_file
}
//--------------------------------------------------------
/**
 *	Command SaveConfigurationFile related method
 *	Description: Save a configuration file
 *
 *	@param argin Configuration file name (without the path)
 */
//--------------------------------------------------------
void MBFControl::save_configuration_file(Tango::DevString argin)
{
	DEBUG_STREAM << "MBFControl::SaveConfigurationFile()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(MBFControl::save_configuration_file) ENABLED START -----*/

	if( attr_Mode_read[0]==ARB_MODE ) {
		// ARB Pattern
		if( pattern_length==0 ) {
			RAISE_EXCEPTION("Cleaning pattern not defined for ARB Pattern mode");
		}
	}

  char absolute_name[512];
  strcpy(absolute_name, configFilePath.c_str());
  strcat(absolute_name, "/");
  strcat(absolute_name, argin);
  ofstream conf(absolute_name, ios::out);

  if (conf.is_open())
  {

    conf << "## Multibunch Feedback  CONFIG  FILE ##" << endl;
    conf << "BlankingInterval\t" <<  attr_BlankingInterval_read[0] << endl;
    conf << "FeedbackFineGain\t" <<  attr_FeedbackFineGain_read[0] << endl;
    conf << "FeedbackGain\t" <<  attr_FeedbackGain_read[0] << endl;
    conf << "FeedbackPhase\t" <<  attr_FeedbackPhase_read[0] << endl;
    conf << "Harmonic\t" <<  attr_Harmonic_read[0] << endl;
    conf << "Mode\t" <<  modeList[attr_Mode_read[0]] << endl;
    conf << "SweepDwellTime\t" <<  attr_SweepDwellTime_read[0] << endl;
    conf << "SweepGainAllBunches\t" <<  attr_SweepGainAllBunches_read[0] << endl;
		conf << "SweepGainSingleBunch\t" <<  attr_SweepGainSingleBunch_read[0] << endl;
    conf << "SweepRange\t" <<  attr_SweepRange_read[0] << endl;
    conf << "Tune\t" <<  attr_Tune_read[0] << endl;
    conf << "TuneBunch\t" <<  attr_TuneBunch_read[0] << endl;
    conf << "TuneOnSingleBunch\t" <<  attr_TuneOnSingleBunch_read[0] << endl;
    if( attr_Mode_read[0]==ARB_MODE ) {
    	conf << "CleaningPattern\t" << get_pattern_string() << endl;
    }
    conf.close();
    configFile=string(argin);
  }
  else
  {
    // Unable to create file.
    char tmp[1024];
    sprintf(tmp,"Unable to open file for writing %s",absolute_name);
    RAISE_EXCEPTION(tmp);
  }


	/*----- PROTECTED REGION END -----*/	//	MBFControl::save_configuration_file
}
//--------------------------------------------------------
/**
 *	Command GetConfigurationFilePath related method
 *	Description: Returns the absolute confiration file path
 *
 *	@returns Configuration file path
 */
//--------------------------------------------------------
Tango::DevString MBFControl::get_configuration_file_path()
{
	Tango::DevString argout;
	DEBUG_STREAM << "MBFControl::GetConfigurationFilePath()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(MBFControl::get_configuration_file_path) ENABLED START -----*/

  argout  = new char[configFilePath.length()+1];
  strcpy(argout, configFilePath.c_str());

	/*----- PROTECTED REGION END -----*/	//	MBFControl::get_configuration_file_path
	return argout;
}
//--------------------------------------------------------
/**
 *	Command On related method
 *	Description: Switch ON feedback
 *
 */
//--------------------------------------------------------
void MBFControl::on()
{
	DEBUG_STREAM << "MBFControl::On()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(MBFControl::on) ENABLED START -----*/

  if(attr_Mode_read[0]<0 || attr_Mode_read[0]>modeList.size())
    Tango::Except::throw_exception(
            (const char*)"Error",
            (const char*)"Invalid operation mode",
            (const char*)"MBFControl::on");

	run_macro("on","None");

	/*----- PROTECTED REGION END -----*/	//	MBFControl::on
}
//--------------------------------------------------------
/**
 *	Command Off related method
 *	Description: Switch off feedback
 *
 */
//--------------------------------------------------------
void MBFControl::off()
{
	DEBUG_STREAM << "MBFControl::Off()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(MBFControl::off) ENABLED START -----*/

  if(attr_Mode_read[0]<0 || attr_Mode_read[0]>modeList.size())
    Tango::Except::throw_exception(
            (const char*)"Error",
            (const char*)"Invalid operation mode",
            (const char*)"MBFControl::off");

  run_macro("off","None");

	/*----- PROTECTED REGION END -----*/	//	MBFControl::off
}
//--------------------------------------------------------
/**
 *	Command SweepOn related method
 *	Description: Tune sweep on
 *
 */
//--------------------------------------------------------
void MBFControl::sweep_on()
{
	DEBUG_STREAM << "MBFControl::SweepOn()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(MBFControl::sweep_on) ENABLED START -----*/
	
  if(attr_Mode_read[0]<0 || attr_Mode_read[0]>modeList.size())
    Tango::Except::throw_exception(
            (const char*)"Error",
            (const char*)"Invalid operation mode",
            (const char*)"MBFControl::sweep_on");

  run_macro("sweep_on","None");

	/*----- PROTECTED REGION END -----*/	//	MBFControl::sweep_on
}
//--------------------------------------------------------
/**
 *	Command SweepOff related method
 *	Description: Tune sweep off
 *
 */
//--------------------------------------------------------
void MBFControl::sweep_off()
{
	DEBUG_STREAM << "MBFControl::SweepOff()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(MBFControl::sweep_off) ENABLED START -----*/

  if(attr_Mode_read[0]<0 || attr_Mode_read[0]>modeList.size())
    Tango::Except::throw_exception(
            (const char*)"Error",
            (const char*)"Invalid operation mode",
            (const char*)"MBFControl::sweep_off");

  run_macro("sweep_off","None");

	/*----- PROTECTED REGION END -----*/	//	MBFControl::sweep_off
}
//--------------------------------------------------------
/**
 *	Command Clean related method
 *	Description: Start cleaning
 *
 */
//--------------------------------------------------------
void MBFControl::clean()
{
	DEBUG_STREAM << "MBFControl::Clean()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(MBFControl::clean) ENABLED START -----*/
	
  if(attr_Mode_read[0]<0 || attr_Mode_read[0]>modeList.size())
    Tango::Except::throw_exception(
            (const char*)"Error",
            (const char*)"Invalid operation mode",
            (const char*)"MBFControl::clean");

  run_macro("clean","None");

	/*----- PROTECTED REGION END -----*/	//	MBFControl::clean
}
//--------------------------------------------------------
/**
 *	Command Reset related method
 *	Description: Abort sequence
 *
 */
//--------------------------------------------------------
void MBFControl::reset()
{
	DEBUG_STREAM << "MBFControl::Reset()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(MBFControl::reset) ENABLED START -----*/
	
  doorDS->command_inout("AbortMacro");
  sleep(1);
  run_macro("reset","None");

  /*----- PROTECTED REGION END -----*/	//	MBFControl::reset
}
//--------------------------------------------------------
/**
 *	Command ReLoad related method
 *	Description: Reload current parameter on the hardware
 *
 */
//--------------------------------------------------------
void MBFControl::re_load()
{
	DEBUG_STREAM << "MBFControl::ReLoad()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(MBFControl::re_load) ENABLED START -----*/

	if( get_state()==Tango::MOVING )
		RAISE_EXCEPTION("Cannot read config file while moving.");
	
	run_macro("set_param","All");
	
	/*----- PROTECTED REGION END -----*/	//	MBFControl::re_load
}
//--------------------------------------------------------
/**
 *	Method      : MBFControl::add_dynamic_commands()
 *	Description : Create the dynamic commands if any
 *                for specified device.
 */
//--------------------------------------------------------
void MBFControl::add_dynamic_commands()
{
	/*----- PROTECTED REGION ID(MBFControl::add_dynamic_commands) ENABLED START -----*/
	
	//	Add your own code to create and add dynamic commands if any
	
	/*----- PROTECTED REGION END -----*/	//	MBFControl::add_dynamic_commands
}

/*----- PROTECTED REGION ID(MBFControl::namespace_ending) ENABLED START -----*/

//	Additional Methods

short MBFControl::find_mode(string mode) {

  int i=0;
  bool found = false;
  while(!found && i<(int)modeList.size()) {
    found = mode.compare(modeList[i]) == 0;
    if(!found) i++;
  }

  if(!found)
    return -1;
  else
    return (short)i;

}

bool MBFControl::is_srv_starting() {

  if( Tango::Util::instance()->is_svr_starting() ||
      Tango::Util::instance()->is_device_restarting(get_name()) ) {
    return true;
  } else {
    return false;
  }

}

void MBFControl::run_macro(string command,string att) {

	macroName = "mbf_control("+command+")";

	Tango::DevState doorState;
	doorDS->read_attribute ("State") >> doorState;
	if(doorState==Tango::MOVING) {

		usleep(250);

		// Retry once
		doorDS->read_attribute("State") >> doorState;
		if (doorState == Tango::MOVING)
			Tango::Except::throw_exception(
							(const char *) "Error",
							(const char *) ("Cannot execute macro " + command).c_str(),
							(const char *) "MBFControl::run_macro");

	}

  vector<string> v_in;
  v_in.push_back("mbf_control");
  v_in.push_back(mBFDevice);
  v_in.push_back(get_name());
	v_in.push_back(gMBFDevice);
  v_in.push_back(command);
	v_in.push_back(att);

	// Reload the macro
	try {
		reload_macro("mbf_control");
	} catch (const Tango::DevFailed &e) {
		// Error is in the history
		return;
	}

	// Run the Macro
	Tango::DeviceData indat;
	indat << v_in;
	doorDS->command_inout("RunMacro",indat);

}

void MBFControl::reload_macro(string macroname)  {

	vector<string> v_in;
	v_in.push_back("relmaclib");
	v_in.push_back( macroname );
	Tango::DeviceData indat;
	indat << v_in;
	doorDS->command_inout("RunMacro",indat);

	// Wait for the end of the reloading
	Tango::DevState macroState = Tango::RUNNING;
	while( macroState == Tango::RUNNING ) {
		usleep(50000);
		Tango::DeviceAttribute attr_data;
		attr_data = doorDS->read_attribute("State");
		attr_data >> macroState;
	}

	// Check result
	vector<string> history = read_macro_history();
	if(history.size()>0) {
		unsigned int lgth = macroname.length();
		if( strncasecmp( history[0].c_str() , macroname.c_str() , lgth ) != 0 ) {
			// Something wrong
			string errStr = "";
			for(unsigned int i=0;i<history.size();i++) {
				errStr += history[i];
				if( i!=history.size()-1 ) errStr += "\n";
			}
			Tango::Except::throw_exception(
							(const char*)"Error",
							(const char*)errStr.c_str(),
							(const char*)"MBFControl::reload_macro");
		}
	}

}


vector<string> MBFControl::read_macro_history() {

	vector<string> history;
	vector<string> error;
	vector<string> ret;

	Tango::DeviceAttribute attr_data;
	attr_data = doorDS->read_attribute ("Output");
	try
	{
		attr_data >> history;
	}
	catch (const Tango::DevFailed &e)
	{
		// no history data available
	}

	attr_data = doorDS->read_attribute ("Error");
	try
	{
		attr_data >> error;
	}
	catch (const Tango::DevFailed &e)
	{
		// no error data available
	}

	int count = 0;
	for (unsigned int i=0; i<history.size() && count < 512; i++) {
		ret.push_back(history[i]);
		count++;
	}

	for (unsigned int i=0; i<error.size() && count < 512; i++)
	{
		ret.push_back(error[i]);
		count++;
	}

	return ret;

}

Tango::DevString *MBFControl::make_string_array(vector<string> v) {

	Tango::DevString *ret;
	ret = new Tango::DevString[v.size()];
	for(int i=0;i<(int)v.size();i++) {
		ret[i] = Tango::string_dup( v[i].c_str() );
	}

	return ret;

}

string MBFControl::get_pattern_string() {

	stringstream str;
	for(int i=0;i<pattern_length;i++) {
		str << attr_CleaningPattern_read[i];
		if(i<pattern_length-1)
			str << ",";
	}
	string ret;
	str >> ret;
	return ret;

}

void MBFControl::split(vector<string> &tokens, const string &text, char sep) {

  size_t start = 0, end = 0;
  tokens.clear();

  while ((end = text.find(sep, start)) != string::npos) {
    tokens.push_back(text.substr(start, end - start));
    start = end + 1;
  }

  tokens.push_back(text.substr(start));

}

string MBFControl::get_date() {

  // Add date
  time_t now = time(NULL);
  char *dateStr = ctime(&now);
  char tmp[128];
  tmp[0] = dateStr[8];
  tmp[1] = dateStr[9];
  tmp[2] = '/';
  tmp[3] = dateStr[4];
  tmp[4] = dateStr[5];
  tmp[5] = dateStr[6];
  tmp[6] = '/';
  tmp[7] = dateStr[20];
  tmp[8] = dateStr[21];
  tmp[9] = dateStr[22];
  tmp[10] = dateStr[23];
  tmp[11] = ' ';
  tmp[12] = dateStr[11];
  tmp[13] = dateStr[12];
  tmp[14] = dateStr[13];
  tmp[15] = dateStr[14];
  tmp[16] = dateStr[15];
  tmp[17] = dateStr[16];
  tmp[18] = dateStr[17];
  tmp[19] = dateStr[18];
  tmp[20] = 0;
  return string(tmp);

}


/*----- PROTECTED REGION END -----*/	//	MBFControl::namespace_ending
} //	namespace
