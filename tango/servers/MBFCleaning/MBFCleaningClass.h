/*----- PROTECTED REGION ID(MBFCleaningClass.h) ENABLED START -----*/
//=============================================================================
//
// file :        MBFCleaningClass.h
//
// description : Include for the MBFCleaning root class.
//               This class is the singleton class for
//                the MBFCleaning device class.
//               It contains all properties and methods which the 
//               MBFCleaning requires only once e.g. the commands.
//
// project :     MBFCleaning
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
//
// Copyright (C): 2018
//                European Synchrotron Radiation Facility
//                BP 220, Grenoble 38043
//                France
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef MBFCleaningClass_H
#define MBFCleaningClass_H

#include <tango.h>
#include <MBFCleaning.h>


/*----- PROTECTED REGION END -----*/	//	MBFCleaningClass.h


namespace MBFCleaning_ns
{
/*----- PROTECTED REGION ID(MBFCleaningClass::classes for dynamic creation) ENABLED START -----*/


/*----- PROTECTED REGION END -----*/	//	MBFCleaningClass::classes for dynamic creation

//=========================================
//	Define classes for attributes
//=========================================
//	Attribute FreqMin class definition
class FreqMinAttrib: public Tango::Attr
{
public:
	FreqMinAttrib():Attr("FreqMin",
			Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~FreqMinAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<MBFCleaning *>(dev))->read_FreqMin(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<MBFCleaning *>(dev))->write_FreqMin(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<MBFCleaning *>(dev))->is_FreqMin_allowed(ty);}
};

//	Attribute FreqMax class definition
class FreqMaxAttrib: public Tango::Attr
{
public:
	FreqMaxAttrib():Attr("FreqMax",
			Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~FreqMaxAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<MBFCleaning *>(dev))->read_FreqMax(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<MBFCleaning *>(dev))->write_FreqMax(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<MBFCleaning *>(dev))->is_FreqMax_allowed(ty);}
};

//	Attribute SweepTime class definition
class SweepTimeAttrib: public Tango::Attr
{
public:
	SweepTimeAttrib():Attr("SweepTime",
			Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~SweepTimeAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<MBFCleaning *>(dev))->read_SweepTime(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<MBFCleaning *>(dev))->write_SweepTime(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<MBFCleaning *>(dev))->is_SweepTime_allowed(ty);}
};

//	Attribute Gain class definition
class GainAttrib: public Tango::Attr
{
public:
	GainAttrib():Attr("Gain",
			Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~GainAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<MBFCleaning *>(dev))->read_Gain(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<MBFCleaning *>(dev))->write_Gain(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<MBFCleaning *>(dev))->is_Gain_allowed(ty);}
};

//	Attribute ConfigFileName class definition
class ConfigFileNameAttrib: public Tango::Attr
{
public:
	ConfigFileNameAttrib():Attr("ConfigFileName",
			Tango::DEV_STRING, Tango::READ) {};
	~ConfigFileNameAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<MBFCleaning *>(dev))->read_ConfigFileName(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<MBFCleaning *>(dev))->is_ConfigFileName_allowed(ty);}
};

//	Attribute Scrapers class definition
class ScrapersAttrib: public Tango::Attr
{
public:
	ScrapersAttrib():Attr("Scrapers",
			Tango::DEV_SHORT, Tango::READ_WRITE) {};
	~ScrapersAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<MBFCleaning *>(dev))->read_Scrapers(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<MBFCleaning *>(dev))->write_Scrapers(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<MBFCleaning *>(dev))->is_Scrapers_allowed(ty);}
};

//	Attribute Upp5 class definition
class Upp5Attrib: public Tango::Attr
{
public:
	Upp5Attrib():Attr("Upp5",
			Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~Upp5Attrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<MBFCleaning *>(dev))->read_Upp5(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<MBFCleaning *>(dev))->write_Upp5(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<MBFCleaning *>(dev))->is_Upp5_allowed(ty);}
};

//	Attribute Low5 class definition
class Low5Attrib: public Tango::Attr
{
public:
	Low5Attrib():Attr("Low5",
			Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~Low5Attrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<MBFCleaning *>(dev))->read_Low5(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<MBFCleaning *>(dev))->write_Low5(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<MBFCleaning *>(dev))->is_Low5_allowed(ty);}
};

//	Attribute Upp25 class definition
class Upp25Attrib: public Tango::Attr
{
public:
	Upp25Attrib():Attr("Upp25",
			Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~Upp25Attrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<MBFCleaning *>(dev))->read_Upp25(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<MBFCleaning *>(dev))->write_Upp25(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<MBFCleaning *>(dev))->is_Upp25_allowed(ty);}
};

//	Attribute Low25 class definition
class Low25Attrib: public Tango::Attr
{
public:
	Low25Attrib():Attr("Low25",
			Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~Low25Attrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<MBFCleaning *>(dev))->read_Low25(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<MBFCleaning *>(dev))->write_Low25(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<MBFCleaning *>(dev))->is_Low25_allowed(ty);}
};

//	Attribute Upp22 class definition
class Upp22Attrib: public Tango::Attr
{
public:
	Upp22Attrib():Attr("Upp22",
			Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~Upp22Attrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<MBFCleaning *>(dev))->read_Upp22(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<MBFCleaning *>(dev))->write_Upp22(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<MBFCleaning *>(dev))->is_Upp22_allowed(ty);}
};

//	Attribute ExternalSweep class definition
class ExternalSweepAttrib: public Tango::Attr
{
public:
	ExternalSweepAttrib():Attr("ExternalSweep",
			Tango::DEV_BOOLEAN, Tango::READ_WRITE) {};
	~ExternalSweepAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<MBFCleaning *>(dev))->read_ExternalSweep(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<MBFCleaning *>(dev))->write_ExternalSweep(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<MBFCleaning *>(dev))->is_ExternalSweep_allowed(ty);}
};


//=========================================
//	Define classes for commands
//=========================================
//	Command StartCleaning class definition
class StartCleaningClass : public Tango::Command
{
public:
	StartCleaningClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	StartCleaningClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~StartCleaningClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<MBFCleaning *>(dev))->is_StartCleaning_allowed(any);}
};

//	Command LoadConfigurationFile class definition
class LoadConfigurationFileClass : public Tango::Command
{
public:
	LoadConfigurationFileClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	LoadConfigurationFileClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~LoadConfigurationFileClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<MBFCleaning *>(dev))->is_LoadConfigurationFile_allowed(any);}
};

//	Command SaveConfigurationFile class definition
class SaveConfigurationFileClass : public Tango::Command
{
public:
	SaveConfigurationFileClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	SaveConfigurationFileClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~SaveConfigurationFileClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<MBFCleaning *>(dev))->is_SaveConfigurationFile_allowed(any);}
};

//	Command GetConfigurationFilePath class definition
class GetConfigurationFilePathClass : public Tango::Command
{
public:
	GetConfigurationFilePathClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	GetConfigurationFilePathClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~GetConfigurationFilePathClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<MBFCleaning *>(dev))->is_GetConfigurationFilePath_allowed(any);}
};

//	Command Sweep class definition
class SweepClass : public Tango::Command
{
public:
	SweepClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	SweepClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~SweepClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<MBFCleaning *>(dev))->is_Sweep_allowed(any);}
};

//	Command EndCleaning class definition
class EndCleaningClass : public Tango::Command
{
public:
	EndCleaningClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	EndCleaningClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~EndCleaningClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<MBFCleaning *>(dev))->is_EndCleaning_allowed(any);}
};

//	Command DoAll class definition
class DoAllClass : public Tango::Command
{
public:
	DoAllClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	DoAllClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~DoAllClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<MBFCleaning *>(dev))->is_DoAll_allowed(any);}
};


/**
 *	The MBFCleaningClass singleton definition
 */

#ifdef _TG_WINDOWS_
class __declspec(dllexport)  MBFCleaningClass : public Tango::DeviceClass
#else
class MBFCleaningClass : public Tango::DeviceClass
#endif
{
	/*----- PROTECTED REGION ID(MBFCleaningClass::Additionnal DServer data members) ENABLED START -----*/
	
	
	/*----- PROTECTED REGION END -----*/	//	MBFCleaningClass::Additionnal DServer data members

	public:
		//	write class properties data members
		Tango::DbData	cl_prop;
		Tango::DbData	cl_def_prop;
		Tango::DbData	dev_def_prop;
	
		//	Method prototypes
		static MBFCleaningClass *init(const char *);
		static MBFCleaningClass *instance();
		~MBFCleaningClass();
		Tango::DbDatum	get_class_property(string &);
		Tango::DbDatum	get_default_device_property(string &);
		Tango::DbDatum	get_default_class_property(string &);
	
	protected:
		MBFCleaningClass(string &);
		static MBFCleaningClass *_instance;
		void command_factory();
		void attribute_factory(vector<Tango::Attr *> &);
		void pipe_factory();
		void write_class_property();
		void set_default_property();
		void get_class_property();
		string get_cvstag();
		string get_cvsroot();
	
	private:
		void device_factory(const Tango::DevVarStringArray *);
		void create_static_attribute_list(vector<Tango::Attr *> &);
		void erase_dynamic_attributes(const Tango::DevVarStringArray *,vector<Tango::Attr *> &);
		vector<string>	defaultAttList;
		Tango::Attr *get_attr_object_by_name(vector<Tango::Attr *> &att_list, string attname);
};

}	//	End of namespace

#endif   //	MBFCleaning_H
