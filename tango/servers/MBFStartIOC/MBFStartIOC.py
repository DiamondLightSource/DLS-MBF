#!/usr/bin/env python
# -*- coding:utf-8 -*-


# ############################################################################
#  license :
# ============================================================================
#
#  File :        MBFStartIOC.py
#
#  Project :     Handle EPICS IOC state (start, stop)
#
# This file is part of Tango device class.
# 
# Tango is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# Tango is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Tango.  If not, see <http://www.gnu.org/licenses/>.
# 
#
#  $Author :      benoit.roche$
#
#  $Revision :    $
#
#  $Date :        $
#
#  $HeadUrl :     $
# ============================================================================
#            This file is generated by POGO
#     (Program Obviously used to Generate tango Object)
# ############################################################################

__all__ = ["MBFStartIOC", "MBFStartIOCClass", "main"]

__docformat__ = 'restructuredtext'

import PyTango
import sys
# Add additional import
#----- PROTECTED REGION ID(MBFStartIOC.additionnal_import) ENABLED START -----#
import os
import signal
from time import sleep
import subprocess

commit_suicide = False

#----- PROTECTED REGION END -----#	//	MBFStartIOC.additionnal_import

# Device States Description
# No states for this device


class MBFStartIOC (PyTango.Device_4Impl):
    """"""
    
    # -------- Add you global variables here --------------------------
    #----- PROTECTED REGION ID(MBFStartIOC.global_variables) ENABLED START -----#
    def check_screen_session(self):
        pop_inst1 = subprocess.Popen(["screen", "-ls"], stdout=subprocess.PIPE,
                stderr=subprocess.PIPE)
        pop_inst2 = subprocess.Popen(["grep", "-q", self.screen_name],
                stdin=pop_inst1.stdout, stdout=subprocess.PIPE,
                stderr=subprocess.PIPE)
        return pop_inst2.wait()
    
    #----- PROTECTED REGION END -----#	//	MBFStartIOC.global_variables

    def __init__(self, cl, name):
        PyTango.Device_4Impl.__init__(self,cl,name)
        self.debug_stream("In __init__()")
        MBFStartIOC.init_device(self)
        #----- PROTECTED REGION ID(MBFStartIOC.__init__) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	MBFStartIOC.__init__
        
    def delete_device(self):
        self.debug_stream("In delete_device()")
        #----- PROTECTED REGION ID(MBFStartIOC.delete_device) ENABLED START -----#
        if len(self.command) != 0:
            pop_inst = subprocess.Popen(["screen", "-X", "-S", self.screen_name,
                "quit"], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            pop_inst.wait()
        
        #----- PROTECTED REGION END -----#	//	MBFStartIOC.delete_device

    def init_device(self):
        self.debug_stream("In init_device()")
        self.get_device_properties(self.get_device_class())
        #----- PROTECTED REGION ID(MBFStartIOC.init_device) ENABLED START -----#
        if len(self.command) == 0:
            print >>sys.stderr, "The property command is not defined."
            print >>sys.stderr, "-> the device will not do anything"
            return

        if self.wait_for_amc525:
            self.set_state(PyTango.DevState.MOVING)
            returncode = 1
            print("Waiting for the FPGA to be detected on PCIe port...")
            while returncode:
                pop_inst1 = subprocess.Popen(["lspci", "-v"],
                        stdout=subprocess.PIPE)
                pop_inst2 = subprocess.Popen(["grep", "-q", "Xilinx"],
                        stdin=pop_inst1.stdout, stdout=subprocess.PIPE,
                        stderr=subprocess.PIPE)
                returncode = pop_inst2.wait()
                sleep(0.2)
            print("-> FPGA detected")
            print("")

        if self.ioc_in_screen:
            # Test if screen session already exists
            returncode = self.check_screen_session()
            if returncode == 0:
                print("Screen session already started, nothing to be done.")
            else:
                pop_inst = subprocess.Popen(["screen", "-dmS", self.screen_name]
                    + self.command.split(" "), stdout=subprocess.PIPE,
                    stderr=subprocess.PIPE)
                pop_inst.wait()
                print("IOC Screen session started.")
            print("")

        #----- PROTECTED REGION END -----#	//	MBFStartIOC.init_device

    def always_executed_hook(self):
        self.debug_stream("In always_excuted_hook()")
        #----- PROTECTED REGION ID(MBFStartIOC.always_executed_hook) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	MBFStartIOC.always_executed_hook

    # -------------------------------------------------------------------------
    #    MBFStartIOC read/write attribute methods
    # -------------------------------------------------------------------------
    
    
    
            
    def read_attr_hardware(self, data):
        self.debug_stream("In read_attr_hardware()")
        #----- PROTECTED REGION ID(MBFStartIOC.read_attr_hardware) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	MBFStartIOC.read_attr_hardware


    # -------------------------------------------------------------------------
    #    MBFStartIOC command methods
    # -------------------------------------------------------------------------
    
    def dev_state(self):
        """ This command gets the device state (stored in its device_state data member) and returns it to the caller.
        :return: Device state
        :rtype: PyTango.CmdArgType.DevState
        """
        self.debug_stream("In dev_state()")
        argout = PyTango.DevState.UNKNOWN
        #----- PROTECTED REGION ID(MBFStartIOC.State) ENABLED START -----#
        if len(self.command) != 0:
            returncode = self.check_screen_session()
            if returncode == 0:
                self.set_state(PyTango.DevState.ON)
            else:
                self.set_state(PyTango.DevState.OFF)
                print "Screen session closed."
                print "-> Committing suicide"
                pid = os.getpid()
                os.kill(pid, signal.SIGTERM)
        else:
            self.set_state(PyTango.DevState.FAULT)
        
        #----- PROTECTED REGION END -----#	//	MBFStartIOC.State
        if argout != PyTango.DevState.ALARM:
            PyTango.Device_4Impl.dev_state(self)
        return self.get_state()
        

    #----- PROTECTED REGION ID(MBFStartIOC.programmer_methods) ENABLED START -----#
    
    #----- PROTECTED REGION END -----#	//	MBFStartIOC.programmer_methods

class MBFStartIOCClass(PyTango.DeviceClass):
    # -------- Add you global class variables here --------------------------
    #----- PROTECTED REGION ID(MBFStartIOC.global_class_variables) ENABLED START -----#
    
    #----- PROTECTED REGION END -----#	//	MBFStartIOC.global_class_variables


    #    Class Properties
    class_property_list = {
        }


    #    Device Properties
    device_property_list = {
        'screen_name':
            [PyTango.DevString, 
            "Name of the screen instance which holds the IOC",
            ["SRTMBF"] ],
        'wait_for_amc525':
            [PyTango.DevBoolean, 
            "Wait for the FPGA card (AMC525) to be detected before starting the IOC",
            [True]],
        'ioc_in_screen':
            [PyTango.DevBoolean, 
            "Start or IOC in a screen session",
            [True]],
        'command':
            [PyTango.DevString, 
            "command to be excecuted in a screen session",
            [] ],
        }


    #    Command definitions
    cmd_list = {
        }


    #    Attribute definitions
    attr_list = {
        }


def main():
    try:
        py = PyTango.Util(sys.argv)
        py.add_class(MBFStartIOCClass, MBFStartIOC, 'MBFStartIOC')
        #----- PROTECTED REGION ID(MBFStartIOC.add_classes) ENABLED START -----#

        #----- PROTECTED REGION END -----#	//	MBFStartIOC.add_classes

        U = PyTango.Util.instance()
        U.server_init()
        U.server_run()

    except PyTango.DevFailed as e:
        print ('-------> Received a DevFailed exception:', e)
    except Exception as e:
        print ('-------> An unforeseen exception occured....', e)

if __name__ == '__main__':
    main()
